/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as LogoutImport } from './routes/logout'
import { Route as AcceptInvitationImport } from './routes/accept-invitation'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspaceCreateImport } from './routes/workspace/create'
import { Route as WorkspaceWorkspaceIdImport } from './routes/workspace/$workspaceId'
import { Route as WorkspaceWorkspaceIdTemplatesImport } from './routes/workspace/$workspaceId/templates'
import { Route as WorkspaceWorkspaceIdSettingsImport } from './routes/workspace/$workspaceId/settings'
import { Route as WorkspaceWorkspaceIdContactsImport } from './routes/workspace/$workspaceId/contacts'
import { Route as WorkspaceWorkspaceIdCampaignsImport } from './routes/workspace/$workspaceId/campaigns'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const AcceptInvitationRoute = AcceptInvitationImport.update({
  id: '/accept-invitation',
  path: '/accept-invitation',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspaceCreateRoute = WorkspaceCreateImport.update({
  id: '/workspace/create',
  path: '/workspace/create',
  getParentRoute: () => rootRoute,
} as any)

const WorkspaceWorkspaceIdRoute = WorkspaceWorkspaceIdImport.update({
  id: '/workspace/$workspaceId',
  path: '/workspace/$workspaceId',
  getParentRoute: () => rootRoute,
} as any)

const WorkspaceWorkspaceIdTemplatesRoute =
  WorkspaceWorkspaceIdTemplatesImport.update({
    id: '/templates',
    path: '/templates',
    getParentRoute: () => WorkspaceWorkspaceIdRoute,
  } as any)

const WorkspaceWorkspaceIdSettingsRoute =
  WorkspaceWorkspaceIdSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => WorkspaceWorkspaceIdRoute,
  } as any)

const WorkspaceWorkspaceIdContactsRoute =
  WorkspaceWorkspaceIdContactsImport.update({
    id: '/contacts',
    path: '/contacts',
    getParentRoute: () => WorkspaceWorkspaceIdRoute,
  } as any)

const WorkspaceWorkspaceIdCampaignsRoute =
  WorkspaceWorkspaceIdCampaignsImport.update({
    id: '/campaigns',
    path: '/campaigns',
    getParentRoute: () => WorkspaceWorkspaceIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/accept-invitation': {
      id: '/accept-invitation'
      path: '/accept-invitation'
      fullPath: '/accept-invitation'
      preLoaderRoute: typeof AcceptInvitationImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdImport
      parentRoute: typeof rootRoute
    }
    '/workspace/create': {
      id: '/workspace/create'
      path: '/workspace/create'
      fullPath: '/workspace/create'
      preLoaderRoute: typeof WorkspaceCreateImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId/campaigns': {
      id: '/workspace/$workspaceId/campaigns'
      path: '/campaigns'
      fullPath: '/workspace/$workspaceId/campaigns'
      preLoaderRoute: typeof WorkspaceWorkspaceIdCampaignsImport
      parentRoute: typeof WorkspaceWorkspaceIdImport
    }
    '/workspace/$workspaceId/contacts': {
      id: '/workspace/$workspaceId/contacts'
      path: '/contacts'
      fullPath: '/workspace/$workspaceId/contacts'
      preLoaderRoute: typeof WorkspaceWorkspaceIdContactsImport
      parentRoute: typeof WorkspaceWorkspaceIdImport
    }
    '/workspace/$workspaceId/settings': {
      id: '/workspace/$workspaceId/settings'
      path: '/settings'
      fullPath: '/workspace/$workspaceId/settings'
      preLoaderRoute: typeof WorkspaceWorkspaceIdSettingsImport
      parentRoute: typeof WorkspaceWorkspaceIdImport
    }
    '/workspace/$workspaceId/templates': {
      id: '/workspace/$workspaceId/templates'
      path: '/templates'
      fullPath: '/workspace/$workspaceId/templates'
      preLoaderRoute: typeof WorkspaceWorkspaceIdTemplatesImport
      parentRoute: typeof WorkspaceWorkspaceIdImport
    }
  }
}

// Create and export the route tree

interface WorkspaceWorkspaceIdRouteChildren {
  WorkspaceWorkspaceIdCampaignsRoute: typeof WorkspaceWorkspaceIdCampaignsRoute
  WorkspaceWorkspaceIdContactsRoute: typeof WorkspaceWorkspaceIdContactsRoute
  WorkspaceWorkspaceIdSettingsRoute: typeof WorkspaceWorkspaceIdSettingsRoute
  WorkspaceWorkspaceIdTemplatesRoute: typeof WorkspaceWorkspaceIdTemplatesRoute
}

const WorkspaceWorkspaceIdRouteChildren: WorkspaceWorkspaceIdRouteChildren = {
  WorkspaceWorkspaceIdCampaignsRoute: WorkspaceWorkspaceIdCampaignsRoute,
  WorkspaceWorkspaceIdContactsRoute: WorkspaceWorkspaceIdContactsRoute,
  WorkspaceWorkspaceIdSettingsRoute: WorkspaceWorkspaceIdSettingsRoute,
  WorkspaceWorkspaceIdTemplatesRoute: WorkspaceWorkspaceIdTemplatesRoute,
}

const WorkspaceWorkspaceIdRouteWithChildren =
  WorkspaceWorkspaceIdRoute._addFileChildren(WorkspaceWorkspaceIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accept-invitation': typeof AcceptInvitationRoute
  '/logout': typeof LogoutRoute
  '/signin': typeof SigninRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/workspace/create': typeof WorkspaceCreateRoute
  '/workspace/$workspaceId/campaigns': typeof WorkspaceWorkspaceIdCampaignsRoute
  '/workspace/$workspaceId/contacts': typeof WorkspaceWorkspaceIdContactsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/templates': typeof WorkspaceWorkspaceIdTemplatesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accept-invitation': typeof AcceptInvitationRoute
  '/logout': typeof LogoutRoute
  '/signin': typeof SigninRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/workspace/create': typeof WorkspaceCreateRoute
  '/workspace/$workspaceId/campaigns': typeof WorkspaceWorkspaceIdCampaignsRoute
  '/workspace/$workspaceId/contacts': typeof WorkspaceWorkspaceIdContactsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/templates': typeof WorkspaceWorkspaceIdTemplatesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/accept-invitation': typeof AcceptInvitationRoute
  '/logout': typeof LogoutRoute
  '/signin': typeof SigninRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/workspace/create': typeof WorkspaceCreateRoute
  '/workspace/$workspaceId/campaigns': typeof WorkspaceWorkspaceIdCampaignsRoute
  '/workspace/$workspaceId/contacts': typeof WorkspaceWorkspaceIdContactsRoute
  '/workspace/$workspaceId/settings': typeof WorkspaceWorkspaceIdSettingsRoute
  '/workspace/$workspaceId/templates': typeof WorkspaceWorkspaceIdTemplatesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accept-invitation'
    | '/logout'
    | '/signin'
    | '/workspace/$workspaceId'
    | '/workspace/create'
    | '/workspace/$workspaceId/campaigns'
    | '/workspace/$workspaceId/contacts'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/accept-invitation'
    | '/logout'
    | '/signin'
    | '/workspace/$workspaceId'
    | '/workspace/create'
    | '/workspace/$workspaceId/campaigns'
    | '/workspace/$workspaceId/contacts'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/templates'
  id:
    | '__root__'
    | '/'
    | '/accept-invitation'
    | '/logout'
    | '/signin'
    | '/workspace/$workspaceId'
    | '/workspace/create'
    | '/workspace/$workspaceId/campaigns'
    | '/workspace/$workspaceId/contacts'
    | '/workspace/$workspaceId/settings'
    | '/workspace/$workspaceId/templates'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AcceptInvitationRoute: typeof AcceptInvitationRoute
  LogoutRoute: typeof LogoutRoute
  SigninRoute: typeof SigninRoute
  WorkspaceWorkspaceIdRoute: typeof WorkspaceWorkspaceIdRouteWithChildren
  WorkspaceCreateRoute: typeof WorkspaceCreateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AcceptInvitationRoute: AcceptInvitationRoute,
  LogoutRoute: LogoutRoute,
  SigninRoute: SigninRoute,
  WorkspaceWorkspaceIdRoute: WorkspaceWorkspaceIdRouteWithChildren,
  WorkspaceCreateRoute: WorkspaceCreateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accept-invitation",
        "/logout",
        "/signin",
        "/workspace/$workspaceId",
        "/workspace/create"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accept-invitation": {
      "filePath": "accept-invitation.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/workspace/$workspaceId": {
      "filePath": "workspace/$workspaceId.tsx",
      "children": [
        "/workspace/$workspaceId/campaigns",
        "/workspace/$workspaceId/contacts",
        "/workspace/$workspaceId/settings",
        "/workspace/$workspaceId/templates"
      ]
    },
    "/workspace/create": {
      "filePath": "workspace/create.tsx"
    },
    "/workspace/$workspaceId/campaigns": {
      "filePath": "workspace/$workspaceId/campaigns.tsx",
      "parent": "/workspace/$workspaceId"
    },
    "/workspace/$workspaceId/contacts": {
      "filePath": "workspace/$workspaceId/contacts.tsx",
      "parent": "/workspace/$workspaceId"
    },
    "/workspace/$workspaceId/settings": {
      "filePath": "workspace/$workspaceId/settings.tsx",
      "parent": "/workspace/$workspaceId"
    },
    "/workspace/$workspaceId/templates": {
      "filePath": "workspace/$workspaceId/templates.tsx",
      "parent": "/workspace/$workspaceId"
    }
  }
}
ROUTE_MANIFEST_END */
