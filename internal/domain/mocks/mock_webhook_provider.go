// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: WebhookProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockWebhookProvider is a mock of WebhookProvider interface.
type MockWebhookProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookProviderMockRecorder
}

// MockWebhookProviderMockRecorder is the mock recorder for MockWebhookProvider.
type MockWebhookProviderMockRecorder struct {
	mock *MockWebhookProvider
}

// NewMockWebhookProvider creates a new mock instance.
func NewMockWebhookProvider(ctrl *gomock.Controller) *MockWebhookProvider {
	mock := &MockWebhookProvider{ctrl: ctrl}
	mock.recorder = &MockWebhookProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookProvider) EXPECT() *MockWebhookProviderMockRecorder {
	return m.recorder
}

// GetWebhookStatus mocks base method.
func (m *MockWebhookProvider) GetWebhookStatus(arg0 context.Context, arg1, arg2 string, arg3 *domain.EmailProvider) (*domain.WebhookRegistrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.WebhookRegistrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookStatus indicates an expected call of GetWebhookStatus.
func (mr *MockWebhookProviderMockRecorder) GetWebhookStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookStatus", reflect.TypeOf((*MockWebhookProvider)(nil).GetWebhookStatus), arg0, arg1, arg2, arg3)
}

// RegisterWebhooks mocks base method.
func (m *MockWebhookProvider) RegisterWebhooks(arg0 context.Context, arg1, arg2, arg3 string, arg4 []domain.EmailEventType, arg5 *domain.EmailProvider) (*domain.WebhookRegistrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWebhooks", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*domain.WebhookRegistrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWebhooks indicates an expected call of RegisterWebhooks.
func (mr *MockWebhookProviderMockRecorder) RegisterWebhooks(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWebhooks", reflect.TypeOf((*MockWebhookProvider)(nil).RegisterWebhooks), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UnregisterWebhooks mocks base method.
func (m *MockWebhookProvider) UnregisterWebhooks(arg0 context.Context, arg1, arg2 string, arg3 *domain.EmailProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterWebhooks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterWebhooks indicates an expected call of UnregisterWebhooks.
func (mr *MockWebhookProviderMockRecorder) UnregisterWebhooks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterWebhooks", reflect.TypeOf((*MockWebhookProvider)(nil).UnregisterWebhooks), arg0, arg1, arg2, arg3)
}
