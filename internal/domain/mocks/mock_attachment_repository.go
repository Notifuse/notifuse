// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: AttachmentRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAttachmentRepository is a mock of AttachmentRepository interface.
type MockAttachmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttachmentRepositoryMockRecorder
}

// MockAttachmentRepositoryMockRecorder is the mock recorder for MockAttachmentRepository.
type MockAttachmentRepositoryMockRecorder struct {
	mock *MockAttachmentRepository
}

// NewMockAttachmentRepository creates a new mock instance.
func NewMockAttachmentRepository(ctrl *gomock.Controller) *MockAttachmentRepository {
	mock := &MockAttachmentRepository{ctrl: ctrl}
	mock.recorder = &MockAttachmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttachmentRepository) EXPECT() *MockAttachmentRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockAttachmentRepository) Exists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAttachmentRepositoryMockRecorder) Exists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAttachmentRepository)(nil).Exists), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockAttachmentRepository) Get(arg0 context.Context, arg1, arg2 string) (*domain.AttachmentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.AttachmentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAttachmentRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAttachmentRepository)(nil).Get), arg0, arg1, arg2)
}

// Store mocks base method.
func (m *MockAttachmentRepository) Store(arg0 context.Context, arg1 string, arg2 *domain.AttachmentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockAttachmentRepositoryMockRecorder) Store(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockAttachmentRepository)(nil).Store), arg0, arg1, arg2)
}
