// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ListRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockListRepository is a mock of ListRepository interface.
type MockListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListRepositoryMockRecorder
}

// MockListRepositoryMockRecorder is the mock recorder for MockListRepository.
type MockListRepositoryMockRecorder struct {
	mock *MockListRepository
}

// NewMockListRepository creates a new mock instance.
func NewMockListRepository(ctrl *gomock.Controller) *MockListRepository {
	mock := &MockListRepository{ctrl: ctrl}
	mock.recorder = &MockListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepository) EXPECT() *MockListRepositoryMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockListRepository) CreateList(arg0 context.Context, arg1 string, arg2 *domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateList indicates an expected call of CreateList.
func (mr *MockListRepositoryMockRecorder) CreateList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockListRepository)(nil).CreateList), arg0, arg1, arg2)
}

// DeleteList mocks base method.
func (m *MockListRepository) DeleteList(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockListRepositoryMockRecorder) DeleteList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockListRepository)(nil).DeleteList), arg0, arg1, arg2)
}

// GetListByID mocks base method.
func (m *MockListRepository) GetListByID(arg0 context.Context, arg1, arg2 string) (*domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByID indicates an expected call of GetListByID.
func (mr *MockListRepositoryMockRecorder) GetListByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByID", reflect.TypeOf((*MockListRepository)(nil).GetListByID), arg0, arg1, arg2)
}

// GetLists mocks base method.
func (m *MockListRepository) GetLists(arg0 context.Context, arg1 string) ([]*domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", arg0, arg1)
	ret0, _ := ret[0].([]*domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockListRepositoryMockRecorder) GetLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockListRepository)(nil).GetLists), arg0, arg1)
}

// UpdateList mocks base method.
func (m *MockListRepository) UpdateList(arg0 context.Context, arg1 string, arg2 *domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockListRepositoryMockRecorder) UpdateList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockListRepository)(nil).UpdateList), arg0, arg1, arg2)
}
