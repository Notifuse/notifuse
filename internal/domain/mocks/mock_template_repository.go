// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TemplateRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTemplateRepository is a mock of TemplateRepository interface.
type MockTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRepositoryMockRecorder
}

// MockTemplateRepositoryMockRecorder is the mock recorder for MockTemplateRepository.
type MockTemplateRepositoryMockRecorder struct {
	mock *MockTemplateRepository
}

// NewMockTemplateRepository creates a new mock instance.
func NewMockTemplateRepository(ctrl *gomock.Controller) *MockTemplateRepository {
	mock := &MockTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRepository) EXPECT() *MockTemplateRepositoryMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockTemplateRepository) CreateTemplate(arg0 context.Context, arg1 string, arg2 *domain.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockTemplateRepositoryMockRecorder) CreateTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockTemplateRepository)(nil).CreateTemplate), arg0, arg1, arg2)
}

// DeleteTemplate mocks base method.
func (m *MockTemplateRepository) DeleteTemplate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockTemplateRepositoryMockRecorder) DeleteTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockTemplateRepository)(nil).DeleteTemplate), arg0, arg1, arg2)
}

// GetTemplateByID mocks base method.
func (m *MockTemplateRepository) GetTemplateByID(arg0 context.Context, arg1, arg2 string, arg3 int64) (*domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByID indicates an expected call of GetTemplateByID.
func (mr *MockTemplateRepositoryMockRecorder) GetTemplateByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockTemplateRepository)(nil).GetTemplateByID), arg0, arg1, arg2, arg3)
}

// GetTemplateLatestVersion mocks base method.
func (m *MockTemplateRepository) GetTemplateLatestVersion(arg0 context.Context, arg1, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateLatestVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateLatestVersion indicates an expected call of GetTemplateLatestVersion.
func (mr *MockTemplateRepositoryMockRecorder) GetTemplateLatestVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateLatestVersion", reflect.TypeOf((*MockTemplateRepository)(nil).GetTemplateLatestVersion), arg0, arg1, arg2)
}

// GetTemplates mocks base method.
func (m *MockTemplateRepository) GetTemplates(arg0 context.Context, arg1, arg2 string) ([]*domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates.
func (mr *MockTemplateRepositoryMockRecorder) GetTemplates(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockTemplateRepository)(nil).GetTemplates), arg0, arg1, arg2)
}

// UpdateTemplate mocks base method.
func (m *MockTemplateRepository) UpdateTemplate(arg0 context.Context, arg1 string, arg2 *domain.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockTemplateRepositoryMockRecorder) UpdateTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockTemplateRepository)(nil).UpdateTemplate), arg0, arg1, arg2)
}
