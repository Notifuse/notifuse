// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: EmailProviderService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailProviderService is a mock of EmailProviderService interface.
type MockEmailProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderServiceMockRecorder
}

// MockEmailProviderServiceMockRecorder is the mock recorder for MockEmailProviderService.
type MockEmailProviderServiceMockRecorder struct {
	mock *MockEmailProviderService
}

// NewMockEmailProviderService creates a new mock instance.
func NewMockEmailProviderService(ctrl *gomock.Controller) *MockEmailProviderService {
	mock := &MockEmailProviderService{ctrl: ctrl}
	mock.recorder = &MockEmailProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProviderService) EXPECT() *MockEmailProviderServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailProviderService) SendEmail(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string, arg8 *domain.EmailProvider, arg9 string, arg10, arg11 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailProviderServiceMockRecorder) SendEmail(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailProviderService)(nil).SendEmail), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}
