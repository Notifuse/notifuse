// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	paseto "aidanwoods.dev/go-paseto"
	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AuthenticateUserForWorkspace mocks base method.
func (m *MockAuthService) AuthenticateUserForWorkspace(arg0 context.Context, arg1 string) (context.Context, *domain.User, *domain.UserWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUserForWorkspace", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(*domain.UserWorkspace)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// AuthenticateUserForWorkspace indicates an expected call of AuthenticateUserForWorkspace.
func (mr *MockAuthServiceMockRecorder) AuthenticateUserForWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUserForWorkspace", reflect.TypeOf((*MockAuthService)(nil).AuthenticateUserForWorkspace), arg0, arg1)
}

// AuthenticateUserFromContext mocks base method.
func (m *MockAuthService) AuthenticateUserFromContext(arg0 context.Context) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUserFromContext", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUserFromContext indicates an expected call of AuthenticateUserFromContext.
func (mr *MockAuthServiceMockRecorder) AuthenticateUserFromContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUserFromContext", reflect.TypeOf((*MockAuthService)(nil).AuthenticateUserFromContext), arg0)
}

// GenerateAPIAuthToken mocks base method.
func (m *MockAuthService) GenerateAPIAuthToken(arg0 *domain.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAPIAuthToken", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateAPIAuthToken indicates an expected call of GenerateAPIAuthToken.
func (mr *MockAuthServiceMockRecorder) GenerateAPIAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAPIAuthToken", reflect.TypeOf((*MockAuthService)(nil).GenerateAPIAuthToken), arg0)
}

// GenerateInvitationToken mocks base method.
func (m *MockAuthService) GenerateInvitationToken(arg0 *domain.WorkspaceInvitation) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInvitationToken", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateInvitationToken indicates an expected call of GenerateInvitationToken.
func (mr *MockAuthServiceMockRecorder) GenerateInvitationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInvitationToken", reflect.TypeOf((*MockAuthService)(nil).GenerateInvitationToken), arg0)
}

// GenerateUserAuthToken mocks base method.
func (m *MockAuthService) GenerateUserAuthToken(arg0 *domain.User, arg1 string, arg2 time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserAuthToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateUserAuthToken indicates an expected call of GenerateUserAuthToken.
func (mr *MockAuthServiceMockRecorder) GenerateUserAuthToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserAuthToken", reflect.TypeOf((*MockAuthService)(nil).GenerateUserAuthToken), arg0, arg1, arg2)
}

// GetPrivateKey mocks base method.
func (m *MockAuthService) GetPrivateKey() paseto.V4AsymmetricSecretKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateKey")
	ret0, _ := ret[0].(paseto.V4AsymmetricSecretKey)
	return ret0
}

// GetPrivateKey indicates an expected call of GetPrivateKey.
func (mr *MockAuthServiceMockRecorder) GetPrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateKey", reflect.TypeOf((*MockAuthService)(nil).GetPrivateKey))
}

// ValidateInvitationToken mocks base method.
func (m *MockAuthService) ValidateInvitationToken(arg0 string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInvitationToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ValidateInvitationToken indicates an expected call of ValidateInvitationToken.
func (mr *MockAuthServiceMockRecorder) ValidateInvitationToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInvitationToken", reflect.TypeOf((*MockAuthService)(nil).ValidateInvitationToken), arg0)
}

// VerifyUserSession mocks base method.
func (m *MockAuthService) VerifyUserSession(arg0 context.Context, arg1, arg2 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserSession indicates an expected call of VerifyUserSession.
func (mr *MockAuthServiceMockRecorder) VerifyUserSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserSession", reflect.TypeOf((*MockAuthService)(nil).VerifyUserSession), arg0, arg1, arg2)
}
