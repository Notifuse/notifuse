// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: BroadcastSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBroadcastSender is a mock of BroadcastSender interface.
type MockBroadcastSender struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcastSenderMockRecorder
}

// MockBroadcastSenderMockRecorder is the mock recorder for MockBroadcastSender.
type MockBroadcastSenderMockRecorder struct {
	mock *MockBroadcastSender
}

// NewMockBroadcastSender creates a new mock instance.
func NewMockBroadcastSender(ctrl *gomock.Controller) *MockBroadcastSender {
	mock := &MockBroadcastSender{ctrl: ctrl}
	mock.recorder = &MockBroadcastSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcastSender) EXPECT() *MockBroadcastSenderMockRecorder {
	return m.recorder
}

// GetBroadcast mocks base method.
func (m *MockBroadcastSender) GetBroadcast(arg0 context.Context, arg1, arg2 string) (*domain.Broadcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcast", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Broadcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcast indicates an expected call of GetBroadcast.
func (mr *MockBroadcastSenderMockRecorder) GetBroadcast(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcast", reflect.TypeOf((*MockBroadcastSender)(nil).GetBroadcast), arg0, arg1, arg2)
}

// GetRecipientCount mocks base method.
func (m *MockBroadcastSender) GetRecipientCount(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipientCount indicates an expected call of GetRecipientCount.
func (mr *MockBroadcastSenderMockRecorder) GetRecipientCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientCount", reflect.TypeOf((*MockBroadcastSender)(nil).GetRecipientCount), arg0, arg1, arg2)
}

// SendBatch mocks base method.
func (m *MockBroadcastSender) SendBatch(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockBroadcastSenderMockRecorder) SendBatch(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockBroadcastSender)(nil).SendBatch), arg0, arg1, arg2, arg3, arg4)
}
