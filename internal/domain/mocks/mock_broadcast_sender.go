// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: BroadcastSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBroadcastSender is a mock of BroadcastSender interface.
type MockBroadcastSender struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcastSenderMockRecorder
}

// MockBroadcastSenderMockRecorder is the mock recorder for MockBroadcastSender.
type MockBroadcastSenderMockRecorder struct {
	mock *MockBroadcastSender
}

// NewMockBroadcastSender creates a new mock instance.
func NewMockBroadcastSender(ctrl *gomock.Controller) *MockBroadcastSender {
	mock := &MockBroadcastSender{ctrl: ctrl}
	mock.recorder = &MockBroadcastSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcastSender) EXPECT() *MockBroadcastSenderMockRecorder {
	return m.recorder
}

// GetAPIEndpoint mocks base method.
func (m *MockBroadcastSender) GetAPIEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAPIEndpoint indicates an expected call of GetAPIEndpoint.
func (mr *MockBroadcastSenderMockRecorder) GetAPIEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIEndpoint", reflect.TypeOf((*MockBroadcastSender)(nil).GetAPIEndpoint))
}

// GetBroadcast mocks base method.
func (m *MockBroadcastSender) GetBroadcast(arg0 context.Context, arg1, arg2 string) (*domain.Broadcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcast", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Broadcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcast indicates an expected call of GetBroadcast.
func (mr *MockBroadcastSenderMockRecorder) GetBroadcast(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcast", reflect.TypeOf((*MockBroadcastSender)(nil).GetBroadcast), arg0, arg1, arg2)
}

// GetBroadcastRecipients mocks base method.
func (m *MockBroadcastSender) GetBroadcastRecipients(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) ([]*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastRecipients", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastRecipients indicates an expected call of GetBroadcastRecipients.
func (mr *MockBroadcastSenderMockRecorder) GetBroadcastRecipients(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastRecipients", reflect.TypeOf((*MockBroadcastSender)(nil).GetBroadcastRecipients), arg0, arg1, arg2, arg3, arg4)
}

// GetRecipientCount mocks base method.
func (m *MockBroadcastSender) GetRecipientCount(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipientCount indicates an expected call of GetRecipientCount.
func (mr *MockBroadcastSenderMockRecorder) GetRecipientCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientCount", reflect.TypeOf((*MockBroadcastSender)(nil).GetRecipientCount), arg0, arg1, arg2)
}

// GetTemplateByID mocks base method.
func (m *MockBroadcastSender) GetTemplateByID(arg0 context.Context, arg1, arg2 string) (*domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateByID indicates an expected call of GetTemplateByID.
func (mr *MockBroadcastSenderMockRecorder) GetTemplateByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateByID", reflect.TypeOf((*MockBroadcastSender)(nil).GetTemplateByID), arg0, arg1, arg2)
}

// ProcessRecipients mocks base method.
func (m *MockBroadcastSender) ProcessRecipients(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRecipients", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessRecipients indicates an expected call of ProcessRecipients.
func (mr *MockBroadcastSenderMockRecorder) ProcessRecipients(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRecipients", reflect.TypeOf((*MockBroadcastSender)(nil).ProcessRecipients), arg0, arg1, arg2, arg3, arg4)
}

// RecordMessageSent mocks base method.
func (m *MockBroadcastSender) RecordMessageSent(arg0 context.Context, arg1 string, arg2 *domain.MessageHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordMessageSent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordMessageSent indicates an expected call of RecordMessageSent.
func (mr *MockBroadcastSenderMockRecorder) RecordMessageSent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordMessageSent", reflect.TypeOf((*MockBroadcastSender)(nil).RecordMessageSent), arg0, arg1, arg2)
}

// SendToContact mocks base method.
func (m *MockBroadcastSender) SendToContact(arg0 context.Context, arg1, arg2 string, arg3 *domain.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToContact", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToContact indicates an expected call of SendToContact.
func (mr *MockBroadcastSenderMockRecorder) SendToContact(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToContact", reflect.TypeOf((*MockBroadcastSender)(nil).SendToContact), arg0, arg1, arg2, arg3)
}

// SendToContactWithTemplates mocks base method.
func (m *MockBroadcastSender) SendToContactWithTemplates(arg0 context.Context, arg1, arg2 string, arg3 *domain.Contact, arg4 map[string]*domain.Template, arg5 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToContactWithTemplates", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToContactWithTemplates indicates an expected call of SendToContactWithTemplates.
func (mr *MockBroadcastSenderMockRecorder) SendToContactWithTemplates(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToContactWithTemplates", reflect.TypeOf((*MockBroadcastSender)(nil).SendToContactWithTemplates), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateMessageStatus mocks base method.
func (m *MockBroadcastSender) UpdateMessageStatus(arg0 context.Context, arg1, arg2 string, arg3 domain.MessageStatus, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageStatus indicates an expected call of UpdateMessageStatus.
func (mr *MockBroadcastSenderMockRecorder) UpdateMessageStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStatus", reflect.TypeOf((*MockBroadcastSender)(nil).UpdateMessageStatus), arg0, arg1, arg2, arg3, arg4)
}
