// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SegmentRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentRepository is a mock of SegmentRepository interface.
type MockSegmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRepositoryMockRecorder
}

// MockSegmentRepositoryMockRecorder is the mock recorder for MockSegmentRepository.
type MockSegmentRepositoryMockRecorder struct {
	mock *MockSegmentRepository
}

// NewMockSegmentRepository creates a new mock instance.
func NewMockSegmentRepository(ctrl *gomock.Controller) *MockSegmentRepository {
	mock := &MockSegmentRepository{ctrl: ctrl}
	mock.recorder = &MockSegmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRepository) EXPECT() *MockSegmentRepositoryMockRecorder {
	return m.recorder
}

// AddContactToSegment mocks base method.
func (m *MockSegmentRepository) AddContactToSegment(arg0 context.Context, arg1, arg2, arg3 string, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContactToSegment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContactToSegment indicates an expected call of AddContactToSegment.
func (mr *MockSegmentRepositoryMockRecorder) AddContactToSegment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContactToSegment", reflect.TypeOf((*MockSegmentRepository)(nil).AddContactToSegment), arg0, arg1, arg2, arg3, arg4)
}

// CreateSegment mocks base method.
func (m *MockSegmentRepository) CreateSegment(arg0 context.Context, arg1 string, arg2 *domain.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentRepositoryMockRecorder) CreateSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentRepository)(nil).CreateSegment), arg0, arg1, arg2)
}

// DeleteSegment mocks base method.
func (m *MockSegmentRepository) DeleteSegment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentRepositoryMockRecorder) DeleteSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentRepository)(nil).DeleteSegment), arg0, arg1, arg2)
}

// GetContactSegments mocks base method.
func (m *MockSegmentRepository) GetContactSegments(arg0 context.Context, arg1, arg2 string) ([]*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactSegments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactSegments indicates an expected call of GetContactSegments.
func (mr *MockSegmentRepositoryMockRecorder) GetContactSegments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactSegments", reflect.TypeOf((*MockSegmentRepository)(nil).GetContactSegments), arg0, arg1, arg2)
}

// GetSegmentByID mocks base method.
func (m *MockSegmentRepository) GetSegmentByID(arg0 context.Context, arg1, arg2 string) (*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentByID indicates an expected call of GetSegmentByID.
func (mr *MockSegmentRepositoryMockRecorder) GetSegmentByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentByID", reflect.TypeOf((*MockSegmentRepository)(nil).GetSegmentByID), arg0, arg1, arg2)
}

// GetSegmentContactCount mocks base method.
func (m *MockSegmentRepository) GetSegmentContactCount(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentContactCount", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentContactCount indicates an expected call of GetSegmentContactCount.
func (mr *MockSegmentRepositoryMockRecorder) GetSegmentContactCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentContactCount", reflect.TypeOf((*MockSegmentRepository)(nil).GetSegmentContactCount), arg0, arg1, arg2)
}

// GetSegments mocks base method.
func (m *MockSegmentRepository) GetSegments(arg0 context.Context, arg1 string, arg2 bool) ([]*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegments indicates an expected call of GetSegments.
func (mr *MockSegmentRepositoryMockRecorder) GetSegments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegments", reflect.TypeOf((*MockSegmentRepository)(nil).GetSegments), arg0, arg1, arg2)
}

// PreviewSegment mocks base method.
func (m *MockSegmentRepository) PreviewSegment(arg0 context.Context, arg1, arg2 string, arg3 []interface{}, arg4 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewSegment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewSegment indicates an expected call of PreviewSegment.
func (mr *MockSegmentRepositoryMockRecorder) PreviewSegment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewSegment", reflect.TypeOf((*MockSegmentRepository)(nil).PreviewSegment), arg0, arg1, arg2, arg3, arg4)
}

// RemoveContactFromSegment mocks base method.
func (m *MockSegmentRepository) RemoveContactFromSegment(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContactFromSegment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContactFromSegment indicates an expected call of RemoveContactFromSegment.
func (mr *MockSegmentRepositoryMockRecorder) RemoveContactFromSegment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContactFromSegment", reflect.TypeOf((*MockSegmentRepository)(nil).RemoveContactFromSegment), arg0, arg1, arg2, arg3)
}

// RemoveOldMemberships mocks base method.
func (m *MockSegmentRepository) RemoveOldMemberships(arg0 context.Context, arg1, arg2 string, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOldMemberships", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOldMemberships indicates an expected call of RemoveOldMemberships.
func (mr *MockSegmentRepositoryMockRecorder) RemoveOldMemberships(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOldMemberships", reflect.TypeOf((*MockSegmentRepository)(nil).RemoveOldMemberships), arg0, arg1, arg2, arg3)
}

// UpdateSegment mocks base method.
func (m *MockSegmentRepository) UpdateSegment(arg0 context.Context, arg1 string, arg2 *domain.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentRepositoryMockRecorder) UpdateSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentRepository)(nil).UpdateSegment), arg0, arg1, arg2)
}
