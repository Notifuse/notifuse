// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ListService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockListService is a mock of ListService interface.
type MockListService struct {
	ctrl     *gomock.Controller
	recorder *MockListServiceMockRecorder
}

// MockListServiceMockRecorder is the mock recorder for MockListService.
type MockListServiceMockRecorder struct {
	mock *MockListService
}

// NewMockListService creates a new mock instance.
func NewMockListService(ctrl *gomock.Controller) *MockListService {
	mock := &MockListService{ctrl: ctrl}
	mock.recorder = &MockListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListService) EXPECT() *MockListServiceMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockListService) CreateList(arg0 context.Context, arg1 string, arg2 *domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateList indicates an expected call of CreateList.
func (mr *MockListServiceMockRecorder) CreateList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockListService)(nil).CreateList), arg0, arg1, arg2)
}

// DeleteList mocks base method.
func (m *MockListService) DeleteList(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockListServiceMockRecorder) DeleteList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockListService)(nil).DeleteList), arg0, arg1, arg2)
}

// GetListByID mocks base method.
func (m *MockListService) GetListByID(arg0 context.Context, arg1, arg2 string) (*domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByID indicates an expected call of GetListByID.
func (mr *MockListServiceMockRecorder) GetListByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByID", reflect.TypeOf((*MockListService)(nil).GetListByID), arg0, arg1, arg2)
}

// GetListStats mocks base method.
func (m *MockListService) GetListStats(arg0 context.Context, arg1, arg2 string) (*domain.ListStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.ListStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListStats indicates an expected call of GetListStats.
func (mr *MockListServiceMockRecorder) GetListStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListStats", reflect.TypeOf((*MockListService)(nil).GetListStats), arg0, arg1, arg2)
}

// GetLists mocks base method.
func (m *MockListService) GetLists(arg0 context.Context, arg1 string) ([]*domain.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", arg0, arg1)
	ret0, _ := ret[0].([]*domain.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockListServiceMockRecorder) GetLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockListService)(nil).GetLists), arg0, arg1)
}

// SubscribeToLists mocks base method.
func (m *MockListService) SubscribeToLists(arg0 context.Context, arg1 *domain.SubscribeToListsRequest, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLists", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToLists indicates an expected call of SubscribeToLists.
func (mr *MockListServiceMockRecorder) SubscribeToLists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLists", reflect.TypeOf((*MockListService)(nil).SubscribeToLists), arg0, arg1, arg2)
}

// UnsubscribeFromLists mocks base method.
func (m *MockListService) UnsubscribeFromLists(arg0 context.Context, arg1 *domain.UnsubscribeFromListsRequest, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromLists", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsubscribeFromLists indicates an expected call of UnsubscribeFromLists.
func (mr *MockListServiceMockRecorder) UnsubscribeFromLists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromLists", reflect.TypeOf((*MockListService)(nil).UnsubscribeFromLists), arg0, arg1, arg2)
}

// UpdateList mocks base method.
func (m *MockListService) UpdateList(arg0 context.Context, arg1 string, arg2 *domain.List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockListServiceMockRecorder) UpdateList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockListService)(nil).UpdateList), arg0, arg1, arg2)
}
