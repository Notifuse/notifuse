// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TaskRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CompleteSubtask mocks base method.
func (m *MockTaskRepository) CompleteSubtask(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteSubtask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteSubtask indicates an expected call of CompleteSubtask.
func (mr *MockTaskRepositoryMockRecorder) CompleteSubtask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteSubtask", reflect.TypeOf((*MockTaskRepository)(nil).CompleteSubtask), arg0, arg1)
}

// Create mocks base method.
func (m *MockTaskRepository) Create(arg0 context.Context, arg1 string, arg2 *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), arg0, arg1, arg2)
}

// CreateSubtasks mocks base method.
func (m *MockTaskRepository) CreateSubtasks(arg0 context.Context, arg1, arg2 string, arg3 int) ([]*domain.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubtasks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*domain.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubtasks indicates an expected call of CreateSubtasks.
func (mr *MockTaskRepositoryMockRecorder) CreateSubtasks(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubtasks", reflect.TypeOf((*MockTaskRepository)(nil).CreateSubtasks), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), arg0, arg1, arg2)
}

// FailSubtask mocks base method.
func (m *MockTaskRepository) FailSubtask(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSubtask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSubtask indicates an expected call of FailSubtask.
func (mr *MockTaskRepositoryMockRecorder) FailSubtask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSubtask", reflect.TypeOf((*MockTaskRepository)(nil).FailSubtask), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(arg0 context.Context, arg1, arg2 string) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), arg0, arg1, arg2)
}

// GetNextBatch mocks base method.
func (m *MockTaskRepository) GetNextBatch(arg0 context.Context, arg1 int) ([]*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextBatch", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextBatch indicates an expected call of GetNextBatch.
func (mr *MockTaskRepositoryMockRecorder) GetNextBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextBatch", reflect.TypeOf((*MockTaskRepository)(nil).GetNextBatch), arg0, arg1)
}

// GetSubtask mocks base method.
func (m *MockTaskRepository) GetSubtask(arg0 context.Context, arg1 string) (*domain.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubtask", arg0, arg1)
	ret0, _ := ret[0].(*domain.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubtask indicates an expected call of GetSubtask.
func (mr *MockTaskRepositoryMockRecorder) GetSubtask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubtask", reflect.TypeOf((*MockTaskRepository)(nil).GetSubtask), arg0, arg1)
}

// GetSubtasks mocks base method.
func (m *MockTaskRepository) GetSubtasks(arg0 context.Context, arg1 string) ([]*domain.Subtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubtasks", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Subtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubtasks indicates an expected call of GetSubtasks.
func (mr *MockTaskRepositoryMockRecorder) GetSubtasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubtasks", reflect.TypeOf((*MockTaskRepository)(nil).GetSubtasks), arg0, arg1)
}

// List mocks base method.
func (m *MockTaskRepository) List(arg0 context.Context, arg1 string, arg2 domain.TaskFilter) ([]*domain.Task, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Task)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTaskRepositoryMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskRepository)(nil).List), arg0, arg1, arg2)
}

// MarkAsCompleted mocks base method.
func (m *MockTaskRepository) MarkAsCompleted(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsCompleted", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsCompleted indicates an expected call of MarkAsCompleted.
func (mr *MockTaskRepositoryMockRecorder) MarkAsCompleted(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsCompleted", reflect.TypeOf((*MockTaskRepository)(nil).MarkAsCompleted), arg0, arg1, arg2)
}

// MarkAsFailed mocks base method.
func (m *MockTaskRepository) MarkAsFailed(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailed indicates an expected call of MarkAsFailed.
func (mr *MockTaskRepositoryMockRecorder) MarkAsFailed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailed", reflect.TypeOf((*MockTaskRepository)(nil).MarkAsFailed), arg0, arg1, arg2, arg3)
}

// MarkAsPaused mocks base method.
func (m *MockTaskRepository) MarkAsPaused(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPaused", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPaused indicates an expected call of MarkAsPaused.
func (mr *MockTaskRepositoryMockRecorder) MarkAsPaused(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPaused", reflect.TypeOf((*MockTaskRepository)(nil).MarkAsPaused), arg0, arg1, arg2, arg3)
}

// MarkAsRunning mocks base method.
func (m *MockTaskRepository) MarkAsRunning(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRunning", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRunning indicates an expected call of MarkAsRunning.
func (mr *MockTaskRepositoryMockRecorder) MarkAsRunning(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRunning", reflect.TypeOf((*MockTaskRepository)(nil).MarkAsRunning), arg0, arg1, arg2, arg3)
}

// SaveState mocks base method.
func (m *MockTaskRepository) SaveState(arg0 context.Context, arg1, arg2 string, arg3 float64, arg4 *domain.TaskState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveState", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveState indicates an expected call of SaveState.
func (mr *MockTaskRepositoryMockRecorder) SaveState(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveState", reflect.TypeOf((*MockTaskRepository)(nil).SaveState), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(arg0 context.Context, arg1 string, arg2 *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), arg0, arg1, arg2)
}

// UpdateSubtaskProgress mocks base method.
func (m *MockTaskRepository) UpdateSubtaskProgress(arg0 context.Context, arg1 string, arg2 float64, arg3 domain.TaskState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubtaskProgress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubtaskProgress indicates an expected call of UpdateSubtaskProgress.
func (mr *MockTaskRepositoryMockRecorder) UpdateSubtaskProgress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubtaskProgress", reflect.TypeOf((*MockTaskRepository)(nil).UpdateSubtaskProgress), arg0, arg1, arg2, arg3)
}

// UpdateTaskProgressFromSubtasks mocks base method.
func (m *MockTaskRepository) UpdateTaskProgressFromSubtasks(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskProgressFromSubtasks", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskProgressFromSubtasks indicates an expected call of UpdateTaskProgressFromSubtasks.
func (mr *MockTaskRepositoryMockRecorder) UpdateTaskProgressFromSubtasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskProgressFromSubtasks", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTaskProgressFromSubtasks), arg0, arg1, arg2)
}
