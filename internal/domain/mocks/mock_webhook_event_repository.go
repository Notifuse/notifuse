// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: WebhookEventRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockWebhookEventRepository is a mock of WebhookEventRepository interface.
type MockWebhookEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookEventRepositoryMockRecorder
}

// MockWebhookEventRepositoryMockRecorder is the mock recorder for MockWebhookEventRepository.
type MockWebhookEventRepositoryMockRecorder struct {
	mock *MockWebhookEventRepository
}

// NewMockWebhookEventRepository creates a new mock instance.
func NewMockWebhookEventRepository(ctrl *gomock.Controller) *MockWebhookEventRepository {
	mock := &MockWebhookEventRepository{ctrl: ctrl}
	mock.recorder = &MockWebhookEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookEventRepository) EXPECT() *MockWebhookEventRepositoryMockRecorder {
	return m.recorder
}

// ListEvents mocks base method.
func (m *MockWebhookEventRepository) ListEvents(arg0 context.Context, arg1 string, arg2 domain.WebhookEventListParams) (*domain.WebhookEventListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.WebhookEventListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockWebhookEventRepositoryMockRecorder) ListEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockWebhookEventRepository)(nil).ListEvents), arg0, arg1, arg2)
}

// StoreEvents mocks base method.
func (m *MockWebhookEventRepository) StoreEvents(arg0 context.Context, arg1 string, arg2 []*domain.WebhookEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvents indicates an expected call of StoreEvents.
func (mr *MockWebhookEventRepositoryMockRecorder) StoreEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvents", reflect.TypeOf((*MockWebhookEventRepository)(nil).StoreEvents), arg0, arg1, arg2)
}
