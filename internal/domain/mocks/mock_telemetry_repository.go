// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TelemetryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTelemetryRepository is a mock of TelemetryRepository interface.
type MockTelemetryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryRepositoryMockRecorder
}

// MockTelemetryRepositoryMockRecorder is the mock recorder for MockTelemetryRepository.
type MockTelemetryRepositoryMockRecorder struct {
	mock *MockTelemetryRepository
}

// NewMockTelemetryRepository creates a new mock instance.
func NewMockTelemetryRepository(ctrl *gomock.Controller) *MockTelemetryRepository {
	mock := &MockTelemetryRepository{ctrl: ctrl}
	mock.recorder = &MockTelemetryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryRepository) EXPECT() *MockTelemetryRepositoryMockRecorder {
	return m.recorder
}

// CountBroadcasts mocks base method.
func (m *MockTelemetryRepository) CountBroadcasts(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBroadcasts", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBroadcasts indicates an expected call of CountBroadcasts.
func (mr *MockTelemetryRepositoryMockRecorder) CountBroadcasts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBroadcasts", reflect.TypeOf((*MockTelemetryRepository)(nil).CountBroadcasts), arg0, arg1)
}

// CountContacts mocks base method.
func (m *MockTelemetryRepository) CountContacts(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountContacts", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountContacts indicates an expected call of CountContacts.
func (mr *MockTelemetryRepositoryMockRecorder) CountContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountContacts", reflect.TypeOf((*MockTelemetryRepository)(nil).CountContacts), arg0, arg1)
}

// CountLists mocks base method.
func (m *MockTelemetryRepository) CountLists(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLists", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLists indicates an expected call of CountLists.
func (mr *MockTelemetryRepositoryMockRecorder) CountLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLists", reflect.TypeOf((*MockTelemetryRepository)(nil).CountLists), arg0, arg1)
}

// CountMessages mocks base method.
func (m *MockTelemetryRepository) CountMessages(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMessages", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMessages indicates an expected call of CountMessages.
func (mr *MockTelemetryRepositoryMockRecorder) CountMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMessages", reflect.TypeOf((*MockTelemetryRepository)(nil).CountMessages), arg0, arg1)
}

// CountSegments mocks base method.
func (m *MockTelemetryRepository) CountSegments(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSegments", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSegments indicates an expected call of CountSegments.
func (mr *MockTelemetryRepositoryMockRecorder) CountSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSegments", reflect.TypeOf((*MockTelemetryRepository)(nil).CountSegments), arg0, arg1)
}

// CountTransactional mocks base method.
func (m *MockTelemetryRepository) CountTransactional(arg0 context.Context, arg1 *sql.DB) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTransactional", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTransactional indicates an expected call of CountTransactional.
func (mr *MockTelemetryRepositoryMockRecorder) CountTransactional(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTransactional", reflect.TypeOf((*MockTelemetryRepository)(nil).CountTransactional), arg0, arg1)
}

// CountUsers mocks base method.
func (m *MockTelemetryRepository) CountUsers(arg0 context.Context, arg1 *sql.DB, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockTelemetryRepositoryMockRecorder) CountUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockTelemetryRepository)(nil).CountUsers), arg0, arg1, arg2)
}

// GetLastMessageAt mocks base method.
func (m *MockTelemetryRepository) GetLastMessageAt(arg0 context.Context, arg1 *sql.DB) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessageAt", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessageAt indicates an expected call of GetLastMessageAt.
func (mr *MockTelemetryRepositoryMockRecorder) GetLastMessageAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessageAt", reflect.TypeOf((*MockTelemetryRepository)(nil).GetLastMessageAt), arg0, arg1)
}

// GetWorkspaceMetrics mocks base method.
func (m *MockTelemetryRepository) GetWorkspaceMetrics(arg0 context.Context, arg1 string) (*domain.TelemetryMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceMetrics", arg0, arg1)
	ret0, _ := ret[0].(*domain.TelemetryMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceMetrics indicates an expected call of GetWorkspaceMetrics.
func (mr *MockTelemetryRepositoryMockRecorder) GetWorkspaceMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceMetrics", reflect.TypeOf((*MockTelemetryRepository)(nil).GetWorkspaceMetrics), arg0, arg1)
}
