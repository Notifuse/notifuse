// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: BroadcastService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBroadcastService is a mock of BroadcastService interface.
type MockBroadcastService struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcastServiceMockRecorder
}

// MockBroadcastServiceMockRecorder is the mock recorder for MockBroadcastService.
type MockBroadcastServiceMockRecorder struct {
	mock *MockBroadcastService
}

// NewMockBroadcastService creates a new mock instance.
func NewMockBroadcastService(ctrl *gomock.Controller) *MockBroadcastService {
	mock := &MockBroadcastService{ctrl: ctrl}
	mock.recorder = &MockBroadcastServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcastService) EXPECT() *MockBroadcastServiceMockRecorder {
	return m.recorder
}

// CancelBroadcast mocks base method.
func (m *MockBroadcastService) CancelBroadcast(arg0 context.Context, arg1 *domain.CancelBroadcastRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelBroadcast indicates an expected call of CancelBroadcast.
func (mr *MockBroadcastServiceMockRecorder) CancelBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).CancelBroadcast), arg0, arg1)
}

// CreateBroadcast mocks base method.
func (m *MockBroadcastService) CreateBroadcast(arg0 context.Context, arg1 *domain.CreateBroadcastRequest) (*domain.Broadcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBroadcast", arg0, arg1)
	ret0, _ := ret[0].(*domain.Broadcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBroadcast indicates an expected call of CreateBroadcast.
func (mr *MockBroadcastServiceMockRecorder) CreateBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).CreateBroadcast), arg0, arg1)
}

// DeleteBroadcast mocks base method.
func (m *MockBroadcastService) DeleteBroadcast(arg0 context.Context, arg1 *domain.DeleteBroadcastRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBroadcast indicates an expected call of DeleteBroadcast.
func (mr *MockBroadcastServiceMockRecorder) DeleteBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).DeleteBroadcast), arg0, arg1)
}

// GetBroadcast mocks base method.
func (m *MockBroadcastService) GetBroadcast(arg0 context.Context, arg1, arg2 string) (*domain.Broadcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcast", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Broadcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcast indicates an expected call of GetBroadcast.
func (mr *MockBroadcastServiceMockRecorder) GetBroadcast(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).GetBroadcast), arg0, arg1, arg2)
}

// GetTestResults mocks base method.
func (m *MockBroadcastService) GetTestResults(arg0 context.Context, arg1, arg2 string) (*domain.TestResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestResults", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.TestResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestResults indicates an expected call of GetTestResults.
func (mr *MockBroadcastServiceMockRecorder) GetTestResults(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestResults", reflect.TypeOf((*MockBroadcastService)(nil).GetTestResults), arg0, arg1, arg2)
}

// ListBroadcasts mocks base method.
func (m *MockBroadcastService) ListBroadcasts(arg0 context.Context, arg1 domain.ListBroadcastsParams) (*domain.BroadcastListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBroadcasts", arg0, arg1)
	ret0, _ := ret[0].(*domain.BroadcastListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBroadcasts indicates an expected call of ListBroadcasts.
func (mr *MockBroadcastServiceMockRecorder) ListBroadcasts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBroadcasts", reflect.TypeOf((*MockBroadcastService)(nil).ListBroadcasts), arg0, arg1)
}

// PauseBroadcast mocks base method.
func (m *MockBroadcastService) PauseBroadcast(arg0 context.Context, arg1 *domain.PauseBroadcastRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseBroadcast indicates an expected call of PauseBroadcast.
func (mr *MockBroadcastServiceMockRecorder) PauseBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).PauseBroadcast), arg0, arg1)
}

// ResumeBroadcast mocks base method.
func (m *MockBroadcastService) ResumeBroadcast(arg0 context.Context, arg1 *domain.ResumeBroadcastRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeBroadcast indicates an expected call of ResumeBroadcast.
func (mr *MockBroadcastServiceMockRecorder) ResumeBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).ResumeBroadcast), arg0, arg1)
}

// ScheduleBroadcast mocks base method.
func (m *MockBroadcastService) ScheduleBroadcast(arg0 context.Context, arg1 *domain.ScheduleBroadcastRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleBroadcast indicates an expected call of ScheduleBroadcast.
func (mr *MockBroadcastServiceMockRecorder) ScheduleBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).ScheduleBroadcast), arg0, arg1)
}

// SelectWinner mocks base method.
func (m *MockBroadcastService) SelectWinner(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWinner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectWinner indicates an expected call of SelectWinner.
func (mr *MockBroadcastServiceMockRecorder) SelectWinner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWinner", reflect.TypeOf((*MockBroadcastService)(nil).SelectWinner), arg0, arg1, arg2, arg3)
}

// SendToIndividual mocks base method.
func (m *MockBroadcastService) SendToIndividual(arg0 context.Context, arg1 *domain.SendToIndividualRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToIndividual", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToIndividual indicates an expected call of SendToIndividual.
func (mr *MockBroadcastServiceMockRecorder) SendToIndividual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToIndividual", reflect.TypeOf((*MockBroadcastService)(nil).SendToIndividual), arg0, arg1)
}

// UpdateBroadcast mocks base method.
func (m *MockBroadcastService) UpdateBroadcast(arg0 context.Context, arg1 *domain.UpdateBroadcastRequest) (*domain.Broadcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBroadcast", arg0, arg1)
	ret0, _ := ret[0].(*domain.Broadcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBroadcast indicates an expected call of UpdateBroadcast.
func (mr *MockBroadcastServiceMockRecorder) UpdateBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBroadcast", reflect.TypeOf((*MockBroadcastService)(nil).UpdateBroadcast), arg0, arg1)
}
