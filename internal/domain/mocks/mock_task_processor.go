// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TaskProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskProcessor is a mock of TaskProcessor interface.
type MockTaskProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskProcessorMockRecorder
}

// MockTaskProcessorMockRecorder is the mock recorder for MockTaskProcessor.
type MockTaskProcessorMockRecorder struct {
	mock *MockTaskProcessor
}

// NewMockTaskProcessor creates a new mock instance.
func NewMockTaskProcessor(ctrl *gomock.Controller) *MockTaskProcessor {
	mock := &MockTaskProcessor{ctrl: ctrl}
	mock.recorder = &MockTaskProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskProcessor) EXPECT() *MockTaskProcessorMockRecorder {
	return m.recorder
}

// CanProcess mocks base method.
func (m *MockTaskProcessor) CanProcess(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanProcess", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanProcess indicates an expected call of CanProcess.
func (mr *MockTaskProcessorMockRecorder) CanProcess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanProcess", reflect.TypeOf((*MockTaskProcessor)(nil).CanProcess), arg0)
}

// Process mocks base method.
func (m *MockTaskProcessor) Process(arg0 context.Context, arg1 *domain.Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockTaskProcessorMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockTaskProcessor)(nil).Process), arg0, arg1)
}

// ProcessSubtask mocks base method.
func (m *MockTaskProcessor) ProcessSubtask(arg0 context.Context, arg1 *domain.Subtask, arg2 *domain.Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSubtask", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessSubtask indicates an expected call of ProcessSubtask.
func (mr *MockTaskProcessorMockRecorder) ProcessSubtask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSubtask", reflect.TypeOf((*MockTaskProcessor)(nil).ProcessSubtask), arg0, arg1, arg2)
}

// SupportsParallelization mocks base method.
func (m *MockTaskProcessor) SupportsParallelization() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsParallelization")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsParallelization indicates an expected call of SupportsParallelization.
func (mr *MockTaskProcessorMockRecorder) SupportsParallelization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsParallelization", reflect.TypeOf((*MockTaskProcessor)(nil).SupportsParallelization))
}
