// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ContactSegmentQueueRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContactSegmentQueueRepository is a mock of ContactSegmentQueueRepository interface.
type MockContactSegmentQueueRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactSegmentQueueRepositoryMockRecorder
}

// MockContactSegmentQueueRepositoryMockRecorder is the mock recorder for MockContactSegmentQueueRepository.
type MockContactSegmentQueueRepositoryMockRecorder struct {
	mock *MockContactSegmentQueueRepository
}

// NewMockContactSegmentQueueRepository creates a new mock instance.
func NewMockContactSegmentQueueRepository(ctrl *gomock.Controller) *MockContactSegmentQueueRepository {
	mock := &MockContactSegmentQueueRepository{ctrl: ctrl}
	mock.recorder = &MockContactSegmentQueueRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactSegmentQueueRepository) EXPECT() *MockContactSegmentQueueRepositoryMockRecorder {
	return m.recorder
}

// ClearQueue mocks base method.
func (m *MockContactSegmentQueueRepository) ClearQueue(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearQueue indicates an expected call of ClearQueue.
func (mr *MockContactSegmentQueueRepositoryMockRecorder) ClearQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearQueue", reflect.TypeOf((*MockContactSegmentQueueRepository)(nil).ClearQueue), arg0, arg1)
}

// GetPendingEmails mocks base method.
func (m *MockContactSegmentQueueRepository) GetPendingEmails(arg0 context.Context, arg1 string, arg2 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingEmails", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingEmails indicates an expected call of GetPendingEmails.
func (mr *MockContactSegmentQueueRepositoryMockRecorder) GetPendingEmails(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingEmails", reflect.TypeOf((*MockContactSegmentQueueRepository)(nil).GetPendingEmails), arg0, arg1, arg2)
}

// GetQueueSize mocks base method.
func (m *MockContactSegmentQueueRepository) GetQueueSize(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueSize indicates an expected call of GetQueueSize.
func (mr *MockContactSegmentQueueRepositoryMockRecorder) GetQueueSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueSize", reflect.TypeOf((*MockContactSegmentQueueRepository)(nil).GetQueueSize), arg0, arg1)
}

// RemoveBatchFromQueue mocks base method.
func (m *MockContactSegmentQueueRepository) RemoveBatchFromQueue(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBatchFromQueue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBatchFromQueue indicates an expected call of RemoveBatchFromQueue.
func (mr *MockContactSegmentQueueRepositoryMockRecorder) RemoveBatchFromQueue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBatchFromQueue", reflect.TypeOf((*MockContactSegmentQueueRepository)(nil).RemoveBatchFromQueue), arg0, arg1, arg2)
}

// RemoveFromQueue mocks base method.
func (m *MockContactSegmentQueueRepository) RemoveFromQueue(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromQueue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromQueue indicates an expected call of RemoveFromQueue.
func (mr *MockContactSegmentQueueRepositoryMockRecorder) RemoveFromQueue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromQueue", reflect.TypeOf((*MockContactSegmentQueueRepository)(nil).RemoveFromQueue), arg0, arg1, arg2)
}
