// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: AnalyticsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	analytics "github.com/Notifuse/notifuse/pkg/analytics"
	gomock "github.com/golang/mock/gomock"
)

// MockAnalyticsRepository is a mock of AnalyticsRepository interface.
type MockAnalyticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsRepositoryMockRecorder
}

// MockAnalyticsRepositoryMockRecorder is the mock recorder for MockAnalyticsRepository.
type MockAnalyticsRepositoryMockRecorder struct {
	mock *MockAnalyticsRepository
}

// NewMockAnalyticsRepository creates a new mock instance.
func NewMockAnalyticsRepository(ctrl *gomock.Controller) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{ctrl: ctrl}
	mock.recorder = &MockAnalyticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepositoryMockRecorder {
	return m.recorder
}

// GetSchemas mocks base method.
func (m *MockAnalyticsRepository) GetSchemas(arg0 context.Context, arg1 string) (map[string]analytics.SchemaDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemas", arg0, arg1)
	ret0, _ := ret[0].(map[string]analytics.SchemaDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemas indicates an expected call of GetSchemas.
func (mr *MockAnalyticsRepositoryMockRecorder) GetSchemas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemas", reflect.TypeOf((*MockAnalyticsRepository)(nil).GetSchemas), arg0, arg1)
}

// Query mocks base method.
func (m *MockAnalyticsRepository) Query(arg0 context.Context, arg1 string, arg2 analytics.Query) (*analytics.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(*analytics.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockAnalyticsRepositoryMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAnalyticsRepository)(nil).Query), arg0, arg1, arg2)
}
