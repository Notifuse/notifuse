// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SMTPClientFactory,SMTPService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
	mail "github.com/wneessen/go-mail"
)

// MockSMTPClientFactory is a mock of SMTPClientFactory interface.
type MockSMTPClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientFactoryMockRecorder
}

// MockSMTPClientFactoryMockRecorder is the mock recorder for MockSMTPClientFactory.
type MockSMTPClientFactoryMockRecorder struct {
	mock *MockSMTPClientFactory
}

// NewMockSMTPClientFactory creates a new mock instance.
func NewMockSMTPClientFactory(ctrl *gomock.Controller) *MockSMTPClientFactory {
	mock := &MockSMTPClientFactory{ctrl: ctrl}
	mock.recorder = &MockSMTPClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPClientFactory) EXPECT() *MockSMTPClientFactoryMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockSMTPClientFactory) CreateClient(arg0 string, arg1 int, arg2, arg3 string, arg4 bool) (*mail.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*mail.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockSMTPClientFactoryMockRecorder) CreateClient(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockSMTPClientFactory)(nil).CreateClient), arg0, arg1, arg2, arg3, arg4)
}

// MockSMTPService is a mock of SMTPService interface.
type MockSMTPService struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPServiceMockRecorder
}

// MockSMTPServiceMockRecorder is the mock recorder for MockSMTPService.
type MockSMTPServiceMockRecorder struct {
	mock *MockSMTPService
}

// NewMockSMTPService creates a new mock instance.
func NewMockSMTPService(ctrl *gomock.Controller) *MockSMTPService {
	mock := &MockSMTPService{ctrl: ctrl}
	mock.recorder = &MockSMTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPService) EXPECT() *MockSMTPServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSMTPService) SendEmail(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string, arg7 *domain.EmailProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSMTPServiceMockRecorder) SendEmail(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSMTPService)(nil).SendEmail), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
