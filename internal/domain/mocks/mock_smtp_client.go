// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SMTPClient,SMTPClientFactory,SMTPService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSMTPClient is a mock of SMTPClient interface.
type MockSMTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientMockRecorder
}

// MockSMTPClientMockRecorder is the mock recorder for MockSMTPClient.
type MockSMTPClientMockRecorder struct {
	mock *MockSMTPClient
}

// NewMockSMTPClient creates a new mock instance.
func NewMockSMTPClient(ctrl *gomock.Controller) *MockSMTPClient {
	mock := &MockSMTPClient{ctrl: ctrl}
	mock.recorder = &MockSMTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPClient) EXPECT() *MockSMTPClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSMTPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSMTPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSMTPClient)(nil).Close))
}

// DialAndSend mocks base method.
func (m *MockSMTPClient) DialAndSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialAndSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockSMTPClientMockRecorder) DialAndSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockSMTPClient)(nil).DialAndSend))
}

// SetBodyString mocks base method.
func (m *MockSMTPClient) SetBodyString(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBodyString", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBodyString indicates an expected call of SetBodyString.
func (mr *MockSMTPClientMockRecorder) SetBodyString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBodyString", reflect.TypeOf((*MockSMTPClient)(nil).SetBodyString), arg0, arg1)
}

// SetRecipient mocks base method.
func (m *MockSMTPClient) SetRecipient(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetRecipient", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRecipient indicates an expected call of SetRecipient.
func (mr *MockSMTPClientMockRecorder) SetRecipient(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecipient", reflect.TypeOf((*MockSMTPClient)(nil).SetRecipient), varargs...)
}

// SetSender mocks base method.
func (m *MockSMTPClient) SetSender(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSender", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSender indicates an expected call of SetSender.
func (mr *MockSMTPClientMockRecorder) SetSender(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSender", reflect.TypeOf((*MockSMTPClient)(nil).SetSender), varargs...)
}

// SetSubject mocks base method.
func (m *MockSMTPClient) SetSubject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSubject indicates an expected call of SetSubject.
func (mr *MockSMTPClientMockRecorder) SetSubject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubject", reflect.TypeOf((*MockSMTPClient)(nil).SetSubject), arg0)
}

// MockSMTPClientFactory is a mock of SMTPClientFactory interface.
type MockSMTPClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPClientFactoryMockRecorder
}

// MockSMTPClientFactoryMockRecorder is the mock recorder for MockSMTPClientFactory.
type MockSMTPClientFactoryMockRecorder struct {
	mock *MockSMTPClientFactory
}

// NewMockSMTPClientFactory creates a new mock instance.
func NewMockSMTPClientFactory(ctrl *gomock.Controller) *MockSMTPClientFactory {
	mock := &MockSMTPClientFactory{ctrl: ctrl}
	mock.recorder = &MockSMTPClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPClientFactory) EXPECT() *MockSMTPClientFactoryMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockSMTPClientFactory) NewClient(arg0 string, arg1 int, arg2 ...interface{}) (domain.SMTPClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClient", varargs...)
	ret0, _ := ret[0].(domain.SMTPClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockSMTPClientFactoryMockRecorder) NewClient(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockSMTPClientFactory)(nil).NewClient), varargs...)
}

// MockSMTPService is a mock of SMTPService interface.
type MockSMTPService struct {
	ctrl     *gomock.Controller
	recorder *MockSMTPServiceMockRecorder
}

// MockSMTPServiceMockRecorder is the mock recorder for MockSMTPService.
type MockSMTPServiceMockRecorder struct {
	mock *MockSMTPService
}

// NewMockSMTPService creates a new mock instance.
func NewMockSMTPService(ctrl *gomock.Controller) *MockSMTPService {
	mock := &MockSMTPService{ctrl: ctrl}
	mock.recorder = &MockSMTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMTPService) EXPECT() *MockSMTPServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockSMTPService) SendEmail(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string, arg7 *domain.EmailProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSMTPServiceMockRecorder) SendEmail(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSMTPService)(nil).SendEmail), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}
