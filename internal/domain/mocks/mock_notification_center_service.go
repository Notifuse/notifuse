// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: NotificationCenterService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockNotificationCenterService is a mock of NotificationCenterService interface.
type MockNotificationCenterService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationCenterServiceMockRecorder
}

// MockNotificationCenterServiceMockRecorder is the mock recorder for MockNotificationCenterService.
type MockNotificationCenterServiceMockRecorder struct {
	mock *MockNotificationCenterService
}

// NewMockNotificationCenterService creates a new mock instance.
func NewMockNotificationCenterService(ctrl *gomock.Controller) *MockNotificationCenterService {
	mock := &MockNotificationCenterService{ctrl: ctrl}
	mock.recorder = &MockNotificationCenterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationCenterService) EXPECT() *MockNotificationCenterServiceMockRecorder {
	return m.recorder
}

// GetNotificationCenter mocks base method.
func (m *MockNotificationCenterService) GetNotificationCenter(arg0 context.Context, arg1, arg2, arg3 string) (*domain.NotificationCenterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationCenter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.NotificationCenterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationCenter indicates an expected call of GetNotificationCenter.
func (mr *MockNotificationCenterServiceMockRecorder) GetNotificationCenter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationCenter", reflect.TypeOf((*MockNotificationCenterService)(nil).GetNotificationCenter), arg0, arg1, arg2, arg3)
}
