// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: MessageHistoryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageHistoryRepository is a mock of MessageHistoryRepository interface.
type MockMessageHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHistoryRepositoryMockRecorder
}

// MockMessageHistoryRepositoryMockRecorder is the mock recorder for MockMessageHistoryRepository.
type MockMessageHistoryRepositoryMockRecorder struct {
	mock *MockMessageHistoryRepository
}

// NewMockMessageHistoryRepository creates a new mock instance.
func NewMockMessageHistoryRepository(ctrl *gomock.Controller) *MockMessageHistoryRepository {
	mock := &MockMessageHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockMessageHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHistoryRepository) EXPECT() *MockMessageHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageHistoryRepository) Create(arg0 context.Context, arg1 string, arg2 *domain.MessageHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageHistoryRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Create), arg0, arg1, arg2)
}

// DeleteForEmail mocks base method.
func (m *MockMessageHistoryRepository) DeleteForEmail(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForEmail indicates an expected call of DeleteForEmail.
func (mr *MockMessageHistoryRepositoryMockRecorder) DeleteForEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForEmail", reflect.TypeOf((*MockMessageHistoryRepository)(nil).DeleteForEmail), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockMessageHistoryRepository) Get(arg0 context.Context, arg1, arg2 string) (*domain.MessageHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.MessageHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageHistoryRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Get), arg0, arg1, arg2)
}

// GetBroadcastStats mocks base method.
func (m *MockMessageHistoryRepository) GetBroadcastStats(arg0 context.Context, arg1, arg2 string) (*domain.MessageHistoryStatusSum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.MessageHistoryStatusSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastStats indicates an expected call of GetBroadcastStats.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetBroadcastStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastStats", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetBroadcastStats), arg0, arg1, arg2)
}

// GetBroadcastVariationStats mocks base method.
func (m *MockMessageHistoryRepository) GetBroadcastVariationStats(arg0 context.Context, arg1, arg2, arg3 string) (*domain.MessageHistoryStatusSum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastVariationStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.MessageHistoryStatusSum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastVariationStats indicates an expected call of GetBroadcastVariationStats.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetBroadcastVariationStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastVariationStats", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetBroadcastVariationStats), arg0, arg1, arg2, arg3)
}

// GetByBroadcast mocks base method.
func (m *MockMessageHistoryRepository) GetByBroadcast(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) ([]*domain.MessageHistory, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBroadcast", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.MessageHistory)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByBroadcast indicates an expected call of GetByBroadcast.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetByBroadcast(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBroadcast", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetByBroadcast), arg0, arg1, arg2, arg3, arg4)
}

// GetByContact mocks base method.
func (m *MockMessageHistoryRepository) GetByContact(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) ([]*domain.MessageHistory, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContact", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.MessageHistory)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByContact indicates an expected call of GetByContact.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetByContact(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContact", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetByContact), arg0, arg1, arg2, arg3, arg4)
}

// GetByExternalID mocks base method.
func (m *MockMessageHistoryRepository) GetByExternalID(arg0 context.Context, arg1, arg2 string) (*domain.MessageHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.MessageHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalID indicates an expected call of GetByExternalID.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetByExternalID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetByExternalID), arg0, arg1, arg2)
}

// ListMessages mocks base method.
func (m *MockMessageHistoryRepository) ListMessages(arg0 context.Context, arg1 string, arg2 domain.MessageListParams) ([]*domain.MessageHistory, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.MessageHistory)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockMessageHistoryRepositoryMockRecorder) ListMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockMessageHistoryRepository)(nil).ListMessages), arg0, arg1, arg2)
}

// SetClicked mocks base method.
func (m *MockMessageHistoryRepository) SetClicked(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClicked", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClicked indicates an expected call of SetClicked.
func (mr *MockMessageHistoryRepositoryMockRecorder) SetClicked(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClicked", reflect.TypeOf((*MockMessageHistoryRepository)(nil).SetClicked), arg0, arg1, arg2, arg3)
}

// SetOpened mocks base method.
func (m *MockMessageHistoryRepository) SetOpened(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOpened", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOpened indicates an expected call of SetOpened.
func (mr *MockMessageHistoryRepositoryMockRecorder) SetOpened(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpened", reflect.TypeOf((*MockMessageHistoryRepository)(nil).SetOpened), arg0, arg1, arg2, arg3)
}

// SetStatusesIfNotSet mocks base method.
func (m *MockMessageHistoryRepository) SetStatusesIfNotSet(arg0 context.Context, arg1 string, arg2 []domain.MessageEventUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusesIfNotSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusesIfNotSet indicates an expected call of SetStatusesIfNotSet.
func (mr *MockMessageHistoryRepositoryMockRecorder) SetStatusesIfNotSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusesIfNotSet", reflect.TypeOf((*MockMessageHistoryRepository)(nil).SetStatusesIfNotSet), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockMessageHistoryRepository) Update(arg0 context.Context, arg1 string, arg2 *domain.MessageHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageHistoryRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Update), arg0, arg1, arg2)
}
