// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageHistoryRepository is a mock of MessageHistoryRepository interface.
type MockMessageHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHistoryRepositoryMockRecorder
}

// MockMessageHistoryRepositoryMockRecorder is the mock recorder for MockMessageHistoryRepository.
type MockMessageHistoryRepositoryMockRecorder struct {
	mock *MockMessageHistoryRepository
}

// NewMockMessageHistoryRepository creates a new mock instance.
func NewMockMessageHistoryRepository(ctrl *gomock.Controller) *MockMessageHistoryRepository {
	mock := &MockMessageHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockMessageHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHistoryRepository) EXPECT() *MockMessageHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageHistoryRepository) Create(ctx context.Context, workspace string, message *domain.MessageHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, workspace, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageHistoryRepositoryMockRecorder) Create(ctx, workspace, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Create), ctx, workspace, message)
}

// Get mocks base method.
func (m *MockMessageHistoryRepository) Get(ctx context.Context, workspace, id string) (*domain.MessageHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, workspace, id)
	ret0, _ := ret[0].(*domain.MessageHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageHistoryRepositoryMockRecorder) Get(ctx, workspace, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Get), ctx, workspace, id)
}

// GetByBroadcast mocks base method.
func (m *MockMessageHistoryRepository) GetByBroadcast(ctx context.Context, workspace, broadcastID string, limit, offset int) ([]*domain.MessageHistory, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBroadcast", ctx, workspace, broadcastID, limit, offset)
	ret0, _ := ret[0].([]*domain.MessageHistory)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByBroadcast indicates an expected call of GetByBroadcast.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetByBroadcast(ctx, workspace, broadcastID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBroadcast", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetByBroadcast), ctx, workspace, broadcastID, limit, offset)
}

// GetByContact mocks base method.
func (m *MockMessageHistoryRepository) GetByContact(ctx context.Context, workspace, contactID string, limit, offset int) ([]*domain.MessageHistory, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContact", ctx, workspace, contactID, limit, offset)
	ret0, _ := ret[0].([]*domain.MessageHistory)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByContact indicates an expected call of GetByContact.
func (mr *MockMessageHistoryRepositoryMockRecorder) GetByContact(ctx, workspace, contactID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContact", reflect.TypeOf((*MockMessageHistoryRepository)(nil).GetByContact), ctx, workspace, contactID, limit, offset)
}

// Update mocks base method.
func (m *MockMessageHistoryRepository) Update(ctx context.Context, workspace string, message *domain.MessageHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, workspace, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageHistoryRepositoryMockRecorder) Update(ctx, workspace, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageHistoryRepository)(nil).Update), ctx, workspace, message)
}

// UpdateStatus mocks base method.
func (m *MockMessageHistoryRepository) UpdateStatus(ctx context.Context, workspace, id string, status domain.MessageStatus, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, workspace, id, status, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMessageHistoryRepositoryMockRecorder) UpdateStatus(ctx, workspace, id, status, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMessageHistoryRepository)(nil).UpdateStatus), ctx, workspace, id, status, timestamp)
}
