// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ContactRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// BatchImportContacts mocks base method.
func (m *MockContactRepository) BatchImportContacts(arg0 context.Context, arg1 string, arg2 []*domain.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchImportContacts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchImportContacts indicates an expected call of BatchImportContacts.
func (mr *MockContactRepositoryMockRecorder) BatchImportContacts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchImportContacts", reflect.TypeOf((*MockContactRepository)(nil).BatchImportContacts), arg0, arg1, arg2)
}

// DeleteContact mocks base method.
func (m *MockContactRepository) DeleteContact(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockContactRepositoryMockRecorder) DeleteContact(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockContactRepository)(nil).DeleteContact), arg0, arg1, arg2)
}

// GetContactByEmail mocks base method.
func (m *MockContactRepository) GetContactByEmail(arg0 context.Context, arg1, arg2 string) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByEmail indicates an expected call of GetContactByEmail.
func (mr *MockContactRepositoryMockRecorder) GetContactByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByEmail", reflect.TypeOf((*MockContactRepository)(nil).GetContactByEmail), arg0, arg1, arg2)
}

// GetContactByExternalID mocks base method.
func (m *MockContactRepository) GetContactByExternalID(arg0 context.Context, arg1, arg2 string) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByExternalID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByExternalID indicates an expected call of GetContactByExternalID.
func (mr *MockContactRepositoryMockRecorder) GetContactByExternalID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByExternalID", reflect.TypeOf((*MockContactRepository)(nil).GetContactByExternalID), arg0, arg1, arg2)
}

// GetContacts mocks base method.
func (m *MockContactRepository) GetContacts(arg0 context.Context, arg1 *domain.GetContactsRequest) (*domain.GetContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", arg0, arg1)
	ret0, _ := ret[0].(*domain.GetContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactRepositoryMockRecorder) GetContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContactRepository)(nil).GetContacts), arg0, arg1)
}

// UpsertContact mocks base method.
func (m *MockContactRepository) UpsertContact(arg0 context.Context, arg1 string, arg2 *domain.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertContact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertContact indicates an expected call of UpsertContact.
func (mr *MockContactRepositoryMockRecorder) UpsertContact(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertContact", reflect.TypeOf((*MockContactRepository)(nil).UpsertContact), arg0, arg1, arg2)
}
