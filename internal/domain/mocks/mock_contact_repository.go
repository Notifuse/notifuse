// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contact.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockContactRepository is a mock of ContactRepository interface.
type MockContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactRepositoryMockRecorder
}

// MockContactRepositoryMockRecorder is the mock recorder for MockContactRepository.
type MockContactRepositoryMockRecorder struct {
	mock *MockContactRepository
}

// NewMockContactRepository creates a new mock instance.
func NewMockContactRepository(ctrl *gomock.Controller) *MockContactRepository {
	mock := &MockContactRepository{ctrl: ctrl}
	mock.recorder = &MockContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactRepository) EXPECT() *MockContactRepositoryMockRecorder {
	return m.recorder
}

// BulkUpsertContacts mocks base method.
func (m *MockContactRepository) BulkUpsertContacts(ctx context.Context, workspaceID string, contacts []*domain.Contact) ([]domain.BulkUpsertResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsertContacts", ctx, workspaceID, contacts)
	ret0, _ := ret[0].([]domain.BulkUpsertResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpsertContacts indicates an expected call of BulkUpsertContacts.
func (mr *MockContactRepositoryMockRecorder) BulkUpsertContacts(ctx, workspaceID, contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsertContacts", reflect.TypeOf((*MockContactRepository)(nil).BulkUpsertContacts), ctx, workspaceID, contacts)
}

// Count mocks base method.
func (m *MockContactRepository) Count(ctx context.Context, workspaceID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, workspaceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockContactRepositoryMockRecorder) Count(ctx, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockContactRepository)(nil).Count), ctx, workspaceID)
}

// CountContactsForBroadcast mocks base method.
func (m *MockContactRepository) CountContactsForBroadcast(ctx context.Context, workspaceID string, audience domain.AudienceSettings) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountContactsForBroadcast", ctx, workspaceID, audience)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountContactsForBroadcast indicates an expected call of CountContactsForBroadcast.
func (mr *MockContactRepositoryMockRecorder) CountContactsForBroadcast(ctx, workspaceID, audience interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountContactsForBroadcast", reflect.TypeOf((*MockContactRepository)(nil).CountContactsForBroadcast), ctx, workspaceID, audience)
}

// DeleteContact mocks base method.
func (m *MockContactRepository) DeleteContact(ctx context.Context, workspaceID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, workspaceID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockContactRepositoryMockRecorder) DeleteContact(ctx, workspaceID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockContactRepository)(nil).DeleteContact), ctx, workspaceID, email)
}

// GetBatchForSegment mocks base method.
func (m *MockContactRepository) GetBatchForSegment(ctx context.Context, workspaceID string, offset int64, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchForSegment", ctx, workspaceID, offset, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchForSegment indicates an expected call of GetBatchForSegment.
func (mr *MockContactRepositoryMockRecorder) GetBatchForSegment(ctx, workspaceID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchForSegment", reflect.TypeOf((*MockContactRepository)(nil).GetBatchForSegment), ctx, workspaceID, offset, limit)
}

// GetContactByEmail mocks base method.
func (m *MockContactRepository) GetContactByEmail(ctx context.Context, workspaceID, email string) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByEmail", ctx, workspaceID, email)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByEmail indicates an expected call of GetContactByEmail.
func (mr *MockContactRepositoryMockRecorder) GetContactByEmail(ctx, workspaceID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByEmail", reflect.TypeOf((*MockContactRepository)(nil).GetContactByEmail), ctx, workspaceID, email)
}

// GetContactByExternalID mocks base method.
func (m *MockContactRepository) GetContactByExternalID(ctx context.Context, workspaceID, externalID string) (*domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByExternalID", ctx, workspaceID, externalID)
	ret0, _ := ret[0].(*domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByExternalID indicates an expected call of GetContactByExternalID.
func (mr *MockContactRepositoryMockRecorder) GetContactByExternalID(ctx, workspaceID, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByExternalID", reflect.TypeOf((*MockContactRepository)(nil).GetContactByExternalID), ctx, workspaceID, externalID)
}

// GetContacts mocks base method.
func (m *MockContactRepository) GetContacts(ctx context.Context, req *domain.GetContactsRequest) (*domain.GetContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, req)
	ret0, _ := ret[0].(*domain.GetContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactRepositoryMockRecorder) GetContacts(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContactRepository)(nil).GetContacts), ctx, req)
}

// GetContactsForBroadcast mocks base method.
func (m *MockContactRepository) GetContactsForBroadcast(ctx context.Context, workspaceID string, audience domain.AudienceSettings, limit, offset int) ([]*domain.ContactWithList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactsForBroadcast", ctx, workspaceID, audience, limit, offset)
	ret0, _ := ret[0].([]*domain.ContactWithList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactsForBroadcast indicates an expected call of GetContactsForBroadcast.
func (mr *MockContactRepositoryMockRecorder) GetContactsForBroadcast(ctx, workspaceID, audience, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactsForBroadcast", reflect.TypeOf((*MockContactRepository)(nil).GetContactsForBroadcast), ctx, workspaceID, audience, limit, offset)
}

// UpsertContact mocks base method.
func (m *MockContactRepository) UpsertContact(ctx context.Context, workspaceID string, contact *domain.Contact) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertContact", ctx, workspaceID, contact)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertContact indicates an expected call of UpsertContact.
func (mr *MockContactRepositoryMockRecorder) UpsertContact(ctx, workspaceID, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertContact", reflect.TypeOf((*MockContactRepository)(nil).UpsertContact), ctx, workspaceID, contact)
}
