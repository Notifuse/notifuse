// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TransactionalNotificationService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionalNotificationService is a mock of TransactionalNotificationService interface.
type MockTransactionalNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalNotificationServiceMockRecorder
}

// MockTransactionalNotificationServiceMockRecorder is the mock recorder for MockTransactionalNotificationService.
type MockTransactionalNotificationServiceMockRecorder struct {
	mock *MockTransactionalNotificationService
}

// NewMockTransactionalNotificationService creates a new mock instance.
func NewMockTransactionalNotificationService(ctrl *gomock.Controller) *MockTransactionalNotificationService {
	mock := &MockTransactionalNotificationService{ctrl: ctrl}
	mock.recorder = &MockTransactionalNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionalNotificationService) EXPECT() *MockTransactionalNotificationServiceMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockTransactionalNotificationService) CreateNotification(arg0 context.Context, arg1 string, arg2 domain.TransactionalNotificationCreateParams) (*domain.TransactionalNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.TransactionalNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockTransactionalNotificationServiceMockRecorder) CreateNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockTransactionalNotificationService)(nil).CreateNotification), arg0, arg1, arg2)
}

// DeleteNotification mocks base method.
func (m *MockTransactionalNotificationService) DeleteNotification(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockTransactionalNotificationServiceMockRecorder) DeleteNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockTransactionalNotificationService)(nil).DeleteNotification), arg0, arg1, arg2)
}

// GetNotification mocks base method.
func (m *MockTransactionalNotificationService) GetNotification(arg0 context.Context, arg1, arg2 string) (*domain.TransactionalNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.TransactionalNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockTransactionalNotificationServiceMockRecorder) GetNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockTransactionalNotificationService)(nil).GetNotification), arg0, arg1, arg2)
}

// ListNotifications mocks base method.
func (m *MockTransactionalNotificationService) ListNotifications(arg0 context.Context, arg1 string, arg2 map[string]interface{}, arg3, arg4 int) ([]*domain.TransactionalNotification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.TransactionalNotification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockTransactionalNotificationServiceMockRecorder) ListNotifications(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockTransactionalNotificationService)(nil).ListNotifications), arg0, arg1, arg2, arg3, arg4)
}

// SendNotification mocks base method.
func (m *MockTransactionalNotificationService) SendNotification(arg0 context.Context, arg1 string, arg2 domain.TransactionalNotificationSendParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockTransactionalNotificationServiceMockRecorder) SendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockTransactionalNotificationService)(nil).SendNotification), arg0, arg1, arg2)
}

// UpdateNotification mocks base method.
func (m *MockTransactionalNotificationService) UpdateNotification(arg0 context.Context, arg1, arg2 string, arg3 domain.TransactionalNotificationUpdateParams) (*domain.TransactionalNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.TransactionalNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockTransactionalNotificationServiceMockRecorder) UpdateNotification(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockTransactionalNotificationService)(nil).UpdateNotification), arg0, arg1, arg2, arg3)
}
