// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: WorkspaceRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceRepository is a mock of WorkspaceRepository interface.
type MockWorkspaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepositoryMockRecorder
}

// MockWorkspaceRepositoryMockRecorder is the mock recorder for MockWorkspaceRepository.
type MockWorkspaceRepositoryMockRecorder struct {
	mock *MockWorkspaceRepository
}

// NewMockWorkspaceRepository creates a new mock instance.
func NewMockWorkspaceRepository(ctrl *gomock.Controller) *MockWorkspaceRepository {
	mock := &MockWorkspaceRepository{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepository) EXPECT() *MockWorkspaceRepositoryMockRecorder {
	return m.recorder
}

// AddUserToWorkspace mocks base method.
func (m *MockWorkspaceRepository) AddUserToWorkspace(arg0 context.Context, arg1 *domain.UserWorkspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToWorkspace indicates an expected call of AddUserToWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) AddUserToWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).AddUserToWorkspace), arg0, arg1)
}

// Create mocks base method.
func (m *MockWorkspaceRepository) Create(arg0 context.Context, arg1 *domain.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWorkspaceRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkspaceRepository)(nil).Create), arg0, arg1)
}

// CreateDatabase mocks base method.
func (m *MockWorkspaceRepository) CreateDatabase(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockWorkspaceRepositoryMockRecorder) CreateDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockWorkspaceRepository)(nil).CreateDatabase), arg0, arg1)
}

// CreateInvitation mocks base method.
func (m *MockWorkspaceRepository) CreateInvitation(arg0 context.Context, arg1 *domain.WorkspaceInvitation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockWorkspaceRepositoryMockRecorder) CreateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockWorkspaceRepository)(nil).CreateInvitation), arg0, arg1)
}

// Delete mocks base method.
func (m *MockWorkspaceRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkspaceRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspaceRepository)(nil).Delete), arg0, arg1)
}

// DeleteDatabase mocks base method.
func (m *MockWorkspaceRepository) DeleteDatabase(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockWorkspaceRepositoryMockRecorder) DeleteDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockWorkspaceRepository)(nil).DeleteDatabase), arg0, arg1)
}

// DeleteInvitation mocks base method.
func (m *MockWorkspaceRepository) DeleteInvitation(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockWorkspaceRepositoryMockRecorder) DeleteInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockWorkspaceRepository)(nil).DeleteInvitation), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockWorkspaceRepository) GetByID(arg0 context.Context, arg1 string) (*domain.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockWorkspaceRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetByID), arg0, arg1)
}

// GetConnection mocks base method.
func (m *MockWorkspaceRepository) GetConnection(arg0 context.Context, arg1 string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", arg0, arg1)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockWorkspaceRepositoryMockRecorder) GetConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetConnection), arg0, arg1)
}

// GetInvitationByEmail mocks base method.
func (m *MockWorkspaceRepository) GetInvitationByEmail(arg0 context.Context, arg1, arg2 string) (*domain.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationByEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationByEmail indicates an expected call of GetInvitationByEmail.
func (mr *MockWorkspaceRepositoryMockRecorder) GetInvitationByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationByEmail", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetInvitationByEmail), arg0, arg1, arg2)
}

// GetInvitationByID mocks base method.
func (m *MockWorkspaceRepository) GetInvitationByID(arg0 context.Context, arg1 string) (*domain.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitationByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitationByID indicates an expected call of GetInvitationByID.
func (mr *MockWorkspaceRepositoryMockRecorder) GetInvitationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitationByID", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetInvitationByID), arg0, arg1)
}

// GetSystemConnection mocks base method.
func (m *MockWorkspaceRepository) GetSystemConnection(arg0 context.Context) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemConnection", arg0)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemConnection indicates an expected call of GetSystemConnection.
func (mr *MockWorkspaceRepositoryMockRecorder) GetSystemConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemConnection", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetSystemConnection), arg0)
}

// GetUserWorkspace mocks base method.
func (m *MockWorkspaceRepository) GetUserWorkspace(arg0 context.Context, arg1, arg2 string) (*domain.UserWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.UserWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWorkspace indicates an expected call of GetUserWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) GetUserWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetUserWorkspace), arg0, arg1, arg2)
}

// GetUserWorkspaces mocks base method.
func (m *MockWorkspaceRepository) GetUserWorkspaces(arg0 context.Context, arg1 string) ([]*domain.UserWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWorkspaces", arg0, arg1)
	ret0, _ := ret[0].([]*domain.UserWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWorkspaces indicates an expected call of GetUserWorkspaces.
func (mr *MockWorkspaceRepositoryMockRecorder) GetUserWorkspaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWorkspaces", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetUserWorkspaces), arg0, arg1)
}

// GetWorkspaceInvitations mocks base method.
func (m *MockWorkspaceRepository) GetWorkspaceInvitations(arg0 context.Context, arg1 string) ([]*domain.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceInvitations", arg0, arg1)
	ret0, _ := ret[0].([]*domain.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceInvitations indicates an expected call of GetWorkspaceInvitations.
func (mr *MockWorkspaceRepositoryMockRecorder) GetWorkspaceInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceInvitations", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetWorkspaceInvitations), arg0, arg1)
}

// GetWorkspaceUsersWithEmail mocks base method.
func (m *MockWorkspaceRepository) GetWorkspaceUsersWithEmail(arg0 context.Context, arg1 string) ([]*domain.UserWorkspaceWithEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceUsersWithEmail", arg0, arg1)
	ret0, _ := ret[0].([]*domain.UserWorkspaceWithEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceUsersWithEmail indicates an expected call of GetWorkspaceUsersWithEmail.
func (mr *MockWorkspaceRepositoryMockRecorder) GetWorkspaceUsersWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceUsersWithEmail", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetWorkspaceUsersWithEmail), arg0, arg1)
}

// IsUserWorkspaceMember mocks base method.
func (m *MockWorkspaceRepository) IsUserWorkspaceMember(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserWorkspaceMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserWorkspaceMember indicates an expected call of IsUserWorkspaceMember.
func (mr *MockWorkspaceRepositoryMockRecorder) IsUserWorkspaceMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserWorkspaceMember", reflect.TypeOf((*MockWorkspaceRepository)(nil).IsUserWorkspaceMember), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockWorkspaceRepository) List(arg0 context.Context) ([]*domain.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*domain.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkspaceRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkspaceRepository)(nil).List), arg0)
}

// RemoveUserFromWorkspace mocks base method.
func (m *MockWorkspaceRepository) RemoveUserFromWorkspace(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromWorkspace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromWorkspace indicates an expected call of RemoveUserFromWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) RemoveUserFromWorkspace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).RemoveUserFromWorkspace), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockWorkspaceRepository) Update(arg0 context.Context, arg1 *domain.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWorkspaceRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkspaceRepository)(nil).Update), arg0, arg1)
}

// UpdateUserWorkspacePermissions mocks base method.
func (m *MockWorkspaceRepository) UpdateUserWorkspacePermissions(arg0 context.Context, arg1 *domain.UserWorkspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWorkspacePermissions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWorkspacePermissions indicates an expected call of UpdateUserWorkspacePermissions.
func (mr *MockWorkspaceRepositoryMockRecorder) UpdateUserWorkspacePermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWorkspacePermissions", reflect.TypeOf((*MockWorkspaceRepository)(nil).UpdateUserWorkspacePermissions), arg0, arg1)
}

// WithWorkspaceTransaction mocks base method.
func (m *MockWorkspaceRepository) WithWorkspaceTransaction(arg0 context.Context, arg1 string, arg2 func(*sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWorkspaceTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithWorkspaceTransaction indicates an expected call of WithWorkspaceTransaction.
func (mr *MockWorkspaceRepositoryMockRecorder) WithWorkspaceTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWorkspaceTransaction", reflect.TypeOf((*MockWorkspaceRepository)(nil).WithWorkspaceTransaction), arg0, arg1, arg2)
}
