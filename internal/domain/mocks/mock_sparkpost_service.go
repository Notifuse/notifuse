// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SparkPostServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSparkPostServiceInterface is a mock of SparkPostServiceInterface interface.
type MockSparkPostServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSparkPostServiceInterfaceMockRecorder
}

// MockSparkPostServiceInterfaceMockRecorder is the mock recorder for MockSparkPostServiceInterface.
type MockSparkPostServiceInterfaceMockRecorder struct {
	mock *MockSparkPostServiceInterface
}

// NewMockSparkPostServiceInterface creates a new mock instance.
func NewMockSparkPostServiceInterface(ctrl *gomock.Controller) *MockSparkPostServiceInterface {
	mock := &MockSparkPostServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSparkPostServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSparkPostServiceInterface) EXPECT() *MockSparkPostServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateWebhook mocks base method.
func (m *MockSparkPostServiceInterface) CreateWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 domain.SparkPostWebhook) (*domain.SparkPostWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.SparkPostWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) CreateWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).CreateWebhook), arg0, arg1, arg2)
}

// DeleteWebhook mocks base method.
func (m *MockSparkPostServiceInterface) DeleteWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) DeleteWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).DeleteWebhook), arg0, arg1, arg2)
}

// GetWebhook mocks base method.
func (m *MockSparkPostServiceInterface) GetWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 string) (*domain.SparkPostWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.SparkPostWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) GetWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).GetWebhook), arg0, arg1, arg2)
}

// ListWebhooks mocks base method.
func (m *MockSparkPostServiceInterface) ListWebhooks(arg0 context.Context, arg1 domain.SparkPostConfig) (*domain.SparkPostWebhookListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooks", arg0, arg1)
	ret0, _ := ret[0].(*domain.SparkPostWebhookListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooks indicates an expected call of ListWebhooks.
func (mr *MockSparkPostServiceInterfaceMockRecorder) ListWebhooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).ListWebhooks), arg0, arg1)
}

// TestWebhook mocks base method.
func (m *MockSparkPostServiceInterface) TestWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestWebhook indicates an expected call of TestWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) TestWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).TestWebhook), arg0, arg1, arg2)
}

// UpdateWebhook mocks base method.
func (m *MockSparkPostServiceInterface) UpdateWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 string, arg3 domain.SparkPostWebhook) (*domain.SparkPostWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.SparkPostWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) UpdateWebhook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).UpdateWebhook), arg0, arg1, arg2, arg3)
}

// ValidateWebhook mocks base method.
func (m *MockSparkPostServiceInterface) ValidateWebhook(arg0 context.Context, arg1 domain.SparkPostConfig, arg2 domain.SparkPostWebhook) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateWebhook indicates an expected call of ValidateWebhook.
func (mr *MockSparkPostServiceInterfaceMockRecorder) ValidateWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateWebhook", reflect.TypeOf((*MockSparkPostServiceInterface)(nil).ValidateWebhook), arg0, arg1, arg2)
}
