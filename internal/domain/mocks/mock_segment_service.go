// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SegmentService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentService is a mock of SegmentService interface.
type MockSegmentService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentServiceMockRecorder
}

// MockSegmentServiceMockRecorder is the mock recorder for MockSegmentService.
type MockSegmentServiceMockRecorder struct {
	mock *MockSegmentService
}

// NewMockSegmentService creates a new mock instance.
func NewMockSegmentService(ctrl *gomock.Controller) *MockSegmentService {
	mock := &MockSegmentService{ctrl: ctrl}
	mock.recorder = &MockSegmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentService) EXPECT() *MockSegmentServiceMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegmentService) CreateSegment(arg0 context.Context, arg1 *domain.CreateSegmentRequest) (*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0, arg1)
	ret0, _ := ret[0].(*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentServiceMockRecorder) CreateSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegmentService)(nil).CreateSegment), arg0, arg1)
}

// DeleteSegment mocks base method.
func (m *MockSegmentService) DeleteSegment(arg0 context.Context, arg1 *domain.DeleteSegmentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentServiceMockRecorder) DeleteSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegmentService)(nil).DeleteSegment), arg0, arg1)
}

// GetSegment mocks base method.
func (m *MockSegmentService) GetSegment(arg0 context.Context, arg1 *domain.GetSegmentRequest) (*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegment", arg0, arg1)
	ret0, _ := ret[0].(*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegment indicates an expected call of GetSegment.
func (mr *MockSegmentServiceMockRecorder) GetSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegment", reflect.TypeOf((*MockSegmentService)(nil).GetSegment), arg0, arg1)
}

// GetSegmentContacts mocks base method.
func (m *MockSegmentService) GetSegmentContacts(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentContacts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentContacts indicates an expected call of GetSegmentContacts.
func (mr *MockSegmentServiceMockRecorder) GetSegmentContacts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentContacts", reflect.TypeOf((*MockSegmentService)(nil).GetSegmentContacts), arg0, arg1, arg2, arg3, arg4)
}

// ListSegments mocks base method.
func (m *MockSegmentService) ListSegments(arg0 context.Context, arg1 *domain.GetSegmentsRequest) ([]*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSegments", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSegments indicates an expected call of ListSegments.
func (mr *MockSegmentServiceMockRecorder) ListSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSegments", reflect.TypeOf((*MockSegmentService)(nil).ListSegments), arg0, arg1)
}

// PreviewSegment mocks base method.
func (m *MockSegmentService) PreviewSegment(arg0 context.Context, arg1 string, arg2 *domain.TreeNode, arg3 int) (*domain.PreviewSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewSegment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.PreviewSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewSegment indicates an expected call of PreviewSegment.
func (mr *MockSegmentServiceMockRecorder) PreviewSegment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewSegment", reflect.TypeOf((*MockSegmentService)(nil).PreviewSegment), arg0, arg1, arg2, arg3)
}

// RebuildSegment mocks base method.
func (m *MockSegmentService) RebuildSegment(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildSegment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebuildSegment indicates an expected call of RebuildSegment.
func (mr *MockSegmentServiceMockRecorder) RebuildSegment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildSegment", reflect.TypeOf((*MockSegmentService)(nil).RebuildSegment), arg0, arg1, arg2)
}

// UpdateSegment mocks base method.
func (m *MockSegmentService) UpdateSegment(arg0 context.Context, arg1 *domain.UpdateSegmentRequest) (*domain.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", arg0, arg1)
	ret0, _ := ret[0].(*domain.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentServiceMockRecorder) UpdateSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegmentService)(nil).UpdateSegment), arg0, arg1)
}
