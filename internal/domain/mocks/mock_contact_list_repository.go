// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ContactListRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockContactListRepository is a mock of ContactListRepository interface.
type MockContactListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactListRepositoryMockRecorder
}

// MockContactListRepositoryMockRecorder is the mock recorder for MockContactListRepository.
type MockContactListRepositoryMockRecorder struct {
	mock *MockContactListRepository
}

// NewMockContactListRepository creates a new mock instance.
func NewMockContactListRepository(ctrl *gomock.Controller) *MockContactListRepository {
	mock := &MockContactListRepository{ctrl: ctrl}
	mock.recorder = &MockContactListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactListRepository) EXPECT() *MockContactListRepositoryMockRecorder {
	return m.recorder
}

// AddContactToList mocks base method.
func (m *MockContactListRepository) AddContactToList(arg0 context.Context, arg1 string, arg2 *domain.ContactList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContactToList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContactToList indicates an expected call of AddContactToList.
func (mr *MockContactListRepositoryMockRecorder) AddContactToList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContactToList", reflect.TypeOf((*MockContactListRepository)(nil).AddContactToList), arg0, arg1, arg2)
}

// GetContactListByIDs mocks base method.
func (m *MockContactListRepository) GetContactListByIDs(arg0 context.Context, arg1, arg2, arg3 string) (*domain.ContactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactListByIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.ContactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactListByIDs indicates an expected call of GetContactListByIDs.
func (mr *MockContactListRepositoryMockRecorder) GetContactListByIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactListByIDs", reflect.TypeOf((*MockContactListRepository)(nil).GetContactListByIDs), arg0, arg1, arg2, arg3)
}

// GetContactsByListID mocks base method.
func (m *MockContactListRepository) GetContactsByListID(arg0 context.Context, arg1, arg2 string) ([]*domain.ContactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactsByListID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.ContactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactsByListID indicates an expected call of GetContactsByListID.
func (mr *MockContactListRepositoryMockRecorder) GetContactsByListID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactsByListID", reflect.TypeOf((*MockContactListRepository)(nil).GetContactsByListID), arg0, arg1, arg2)
}

// GetListsByEmail mocks base method.
func (m *MockContactListRepository) GetListsByEmail(arg0 context.Context, arg1, arg2 string) ([]*domain.ContactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListsByEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.ContactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListsByEmail indicates an expected call of GetListsByEmail.
func (mr *MockContactListRepositoryMockRecorder) GetListsByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListsByEmail", reflect.TypeOf((*MockContactListRepository)(nil).GetListsByEmail), arg0, arg1, arg2)
}

// RemoveContactFromList mocks base method.
func (m *MockContactListRepository) RemoveContactFromList(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContactFromList", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContactFromList indicates an expected call of RemoveContactFromList.
func (mr *MockContactListRepositoryMockRecorder) RemoveContactFromList(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContactFromList", reflect.TypeOf((*MockContactListRepository)(nil).RemoveContactFromList), arg0, arg1, arg2, arg3)
}

// UpdateContactListStatus mocks base method.
func (m *MockContactListRepository) UpdateContactListStatus(arg0 context.Context, arg1, arg2, arg3 string, arg4 domain.ContactListStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactListStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContactListStatus indicates an expected call of UpdateContactListStatus.
func (mr *MockContactListRepositoryMockRecorder) UpdateContactListStatus(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactListStatus", reflect.TypeOf((*MockContactListRepository)(nil).UpdateContactListStatus), arg0, arg1, arg2, arg3, arg4)
}
