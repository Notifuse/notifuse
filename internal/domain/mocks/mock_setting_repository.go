// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SettingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSettingRepository is a mock of SettingRepository interface.
type MockSettingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSettingRepositoryMockRecorder
}

// MockSettingRepositoryMockRecorder is the mock recorder for MockSettingRepository.
type MockSettingRepositoryMockRecorder struct {
	mock *MockSettingRepository
}

// NewMockSettingRepository creates a new mock instance.
func NewMockSettingRepository(ctrl *gomock.Controller) *MockSettingRepository {
	mock := &MockSettingRepository{ctrl: ctrl}
	mock.recorder = &MockSettingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingRepository) EXPECT() *MockSettingRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSettingRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSettingRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSettingRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSettingRepository) Get(arg0 context.Context, arg1 string) (*domain.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingRepository)(nil).Get), arg0, arg1)
}

// GetLastCronRun mocks base method.
func (m *MockSettingRepository) GetLastCronRun(arg0 context.Context) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCronRun", arg0)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCronRun indicates an expected call of GetLastCronRun.
func (mr *MockSettingRepositoryMockRecorder) GetLastCronRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCronRun", reflect.TypeOf((*MockSettingRepository)(nil).GetLastCronRun), arg0)
}

// List mocks base method.
func (m *MockSettingRepository) List(arg0 context.Context) ([]*domain.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*domain.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSettingRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSettingRepository)(nil).List), arg0)
}

// Set mocks base method.
func (m *MockSettingRepository) Set(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSettingRepositoryMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSettingRepository)(nil).Set), arg0, arg1, arg2)
}

// SetLastCronRun mocks base method.
func (m *MockSettingRepository) SetLastCronRun(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastCronRun", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastCronRun indicates an expected call of SetLastCronRun.
func (mr *MockSettingRepositoryMockRecorder) SetLastCronRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastCronRun", reflect.TypeOf((*MockSettingRepository)(nil).SetLastCronRun), arg0)
}
