// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: MJMLRenderer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMJMLRenderer is a mock of MJMLRenderer interface.
type MockMJMLRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockMJMLRendererMockRecorder
}

// MockMJMLRendererMockRecorder is the mock recorder for MockMJMLRenderer.
type MockMJMLRendererMockRecorder struct {
	mock *MockMJMLRenderer
}

// NewMockMJMLRenderer creates a new mock instance.
func NewMockMJMLRenderer(ctrl *gomock.Controller) *MockMJMLRenderer {
	mock := &MockMJMLRenderer{ctrl: ctrl}
	mock.recorder = &MockMJMLRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMJMLRenderer) EXPECT() *MockMJMLRendererMockRecorder {
	return m.recorder
}

// TreeToMjml mocks base method.
func (m *MockMJMLRenderer) TreeToMjml(arg0 map[string]interface{}, arg1 interface{}, arg2 string, arg3 map[string]string, arg4 int, arg5 interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TreeToMjml", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TreeToMjml indicates an expected call of TreeToMjml.
func (mr *MockMJMLRendererMockRecorder) TreeToMjml(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TreeToMjml", reflect.TypeOf((*MockMJMLRenderer)(nil).TreeToMjml), arg0, arg1, arg2, arg3, arg4, arg5)
}
