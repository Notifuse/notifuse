// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: PostmarkServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPostmarkServiceInterface is a mock of PostmarkServiceInterface interface.
type MockPostmarkServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostmarkServiceInterfaceMockRecorder
}

// MockPostmarkServiceInterfaceMockRecorder is the mock recorder for MockPostmarkServiceInterface.
type MockPostmarkServiceInterfaceMockRecorder struct {
	mock *MockPostmarkServiceInterface
}

// NewMockPostmarkServiceInterface creates a new mock instance.
func NewMockPostmarkServiceInterface(ctrl *gomock.Controller) *MockPostmarkServiceInterface {
	mock := &MockPostmarkServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPostmarkServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostmarkServiceInterface) EXPECT() *MockPostmarkServiceInterfaceMockRecorder {
	return m.recorder
}

// GetWebhook mocks base method.
func (m *MockPostmarkServiceInterface) GetWebhook(arg0 context.Context, arg1 domain.PostmarkSettings, arg2 int) (*domain.PostmarkWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.PostmarkWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockPostmarkServiceInterfaceMockRecorder) GetWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).GetWebhook), arg0, arg1, arg2)
}

// ListWebhooks mocks base method.
func (m *MockPostmarkServiceInterface) ListWebhooks(arg0 context.Context, arg1 domain.PostmarkSettings) (*domain.PostmarkListWebhooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooks", arg0, arg1)
	ret0, _ := ret[0].(*domain.PostmarkListWebhooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhooks indicates an expected call of ListWebhooks.
func (mr *MockPostmarkServiceInterfaceMockRecorder) ListWebhooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).ListWebhooks), arg0, arg1)
}

// RegisterWebhook mocks base method.
func (m *MockPostmarkServiceInterface) RegisterWebhook(arg0 context.Context, arg1 domain.PostmarkSettings, arg2 domain.PostmarkWebhookConfig) (*domain.PostmarkWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.PostmarkWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWebhook indicates an expected call of RegisterWebhook.
func (mr *MockPostmarkServiceInterfaceMockRecorder) RegisterWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWebhook", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).RegisterWebhook), arg0, arg1, arg2)
}

// TestWebhook mocks base method.
func (m *MockPostmarkServiceInterface) TestWebhook(arg0 context.Context, arg1 domain.PostmarkSettings, arg2 int, arg3 domain.EmailEventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestWebhook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestWebhook indicates an expected call of TestWebhook.
func (mr *MockPostmarkServiceInterfaceMockRecorder) TestWebhook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestWebhook", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).TestWebhook), arg0, arg1, arg2, arg3)
}

// UnregisterWebhook mocks base method.
func (m *MockPostmarkServiceInterface) UnregisterWebhook(arg0 context.Context, arg1 domain.PostmarkSettings, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterWebhook indicates an expected call of UnregisterWebhook.
func (mr *MockPostmarkServiceInterfaceMockRecorder) UnregisterWebhook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterWebhook", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).UnregisterWebhook), arg0, arg1, arg2)
}

// UpdateWebhook mocks base method.
func (m *MockPostmarkServiceInterface) UpdateWebhook(arg0 context.Context, arg1 domain.PostmarkSettings, arg2 int, arg3 domain.PostmarkWebhookConfig) (*domain.PostmarkWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.PostmarkWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockPostmarkServiceInterfaceMockRecorder) UpdateWebhook(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockPostmarkServiceInterface)(nil).UpdateWebhook), arg0, arg1, arg2, arg3)
}
