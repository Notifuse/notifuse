// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TransactionalNotificationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionalNotificationRepository is a mock of TransactionalNotificationRepository interface.
type MockTransactionalNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalNotificationRepositoryMockRecorder
}

// MockTransactionalNotificationRepositoryMockRecorder is the mock recorder for MockTransactionalNotificationRepository.
type MockTransactionalNotificationRepositoryMockRecorder struct {
	mock *MockTransactionalNotificationRepository
}

// NewMockTransactionalNotificationRepository creates a new mock instance.
func NewMockTransactionalNotificationRepository(ctrl *gomock.Controller) *MockTransactionalNotificationRepository {
	mock := &MockTransactionalNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionalNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionalNotificationRepository) EXPECT() *MockTransactionalNotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionalNotificationRepository) Create(ctx context.Context, workspace string, notification *domain.TransactionalNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, workspace, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Create(ctx, workspace, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Create), ctx, workspace, notification)
}

// Delete mocks base method.
func (m *MockTransactionalNotificationRepository) Delete(ctx context.Context, workspace, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, workspace, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Delete(ctx, workspace, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Delete), ctx, workspace, id)
}

// Get mocks base method.
func (m *MockTransactionalNotificationRepository) Get(ctx context.Context, workspace, id string) (*domain.TransactionalNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, workspace, id)
	ret0, _ := ret[0].(*domain.TransactionalNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Get(ctx, workspace, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Get), ctx, workspace, id)
}

// List mocks base method.
func (m *MockTransactionalNotificationRepository) List(ctx context.Context, workspace string, filter map[string]interface{}, limit, offset int) ([]*domain.TransactionalNotification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, workspace, filter, limit, offset)
	ret0, _ := ret[0].([]*domain.TransactionalNotification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) List(ctx, workspace, filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).List), ctx, workspace, filter, limit, offset)
}

// Update mocks base method.
func (m *MockTransactionalNotificationRepository) Update(ctx context.Context, workspace string, notification *domain.TransactionalNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, workspace, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Update(ctx, workspace, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Update), ctx, workspace, notification)
} 