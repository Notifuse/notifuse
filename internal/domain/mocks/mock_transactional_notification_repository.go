// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: TransactionalNotificationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionalNotificationRepository is a mock of TransactionalNotificationRepository interface.
type MockTransactionalNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalNotificationRepositoryMockRecorder
}

// MockTransactionalNotificationRepositoryMockRecorder is the mock recorder for MockTransactionalNotificationRepository.
type MockTransactionalNotificationRepositoryMockRecorder struct {
	mock *MockTransactionalNotificationRepository
}

// NewMockTransactionalNotificationRepository creates a new mock instance.
func NewMockTransactionalNotificationRepository(ctrl *gomock.Controller) *MockTransactionalNotificationRepository {
	mock := &MockTransactionalNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionalNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionalNotificationRepository) EXPECT() *MockTransactionalNotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionalNotificationRepository) Create(arg0 context.Context, arg1 string, arg2 *domain.TransactionalNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockTransactionalNotificationRepository) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockTransactionalNotificationRepository) Get(arg0 context.Context, arg1, arg2 string) (*domain.TransactionalNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.TransactionalNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockTransactionalNotificationRepository) List(arg0 context.Context, arg1 string, arg2 map[string]interface{}, arg3, arg4 int) ([]*domain.TransactionalNotification, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.TransactionalNotification)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) List(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).List), arg0, arg1, arg2, arg3, arg4)
}

// Update mocks base method.
func (m *MockTransactionalNotificationRepository) Update(arg0 context.Context, arg1 string, arg2 *domain.TransactionalNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionalNotificationRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionalNotificationRepository)(nil).Update), arg0, arg1, arg2)
}
