// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: EmailServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailServiceInterface is a mock of EmailServiceInterface interface.
type MockEmailServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceInterfaceMockRecorder
}

// MockEmailServiceInterfaceMockRecorder is the mock recorder for MockEmailServiceInterface.
type MockEmailServiceInterfaceMockRecorder struct {
	mock *MockEmailServiceInterface
}

// NewMockEmailServiceInterface creates a new mock instance.
func NewMockEmailServiceInterface(ctrl *gomock.Controller) *MockEmailServiceInterface {
	mock := &MockEmailServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEmailServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceInterface) EXPECT() *MockEmailServiceInterfaceMockRecorder {
	return m.recorder
}

// TestEmailProvider mocks base method.
func (m *MockEmailServiceInterface) TestEmailProvider(arg0 context.Context, arg1 string, arg2 domain.EmailProvider, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestEmailProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestEmailProvider indicates an expected call of TestEmailProvider.
func (mr *MockEmailServiceInterfaceMockRecorder) TestEmailProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestEmailProvider", reflect.TypeOf((*MockEmailServiceInterface)(nil).TestEmailProvider), arg0, arg1, arg2, arg3)
}
