// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: EmailServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	mjml "github.com/Notifuse/notifuse/pkg/mjml"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailServiceInterface is a mock of EmailServiceInterface interface.
type MockEmailServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceInterfaceMockRecorder
}

// MockEmailServiceInterfaceMockRecorder is the mock recorder for MockEmailServiceInterface.
type MockEmailServiceInterfaceMockRecorder struct {
	mock *MockEmailServiceInterface
}

// NewMockEmailServiceInterface creates a new mock instance.
func NewMockEmailServiceInterface(ctrl *gomock.Controller) *MockEmailServiceInterface {
	mock := &MockEmailServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEmailServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceInterface) EXPECT() *MockEmailServiceInterfaceMockRecorder {
	return m.recorder
}

// OpenEmail mocks base method.
func (m *MockEmailServiceInterface) OpenEmail(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenEmail indicates an expected call of OpenEmail.
func (mr *MockEmailServiceInterfaceMockRecorder) OpenEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenEmail", reflect.TypeOf((*MockEmailServiceInterface)(nil).OpenEmail), arg0, arg1, arg2)
}

// SendEmail mocks base method.
func (m *MockEmailServiceInterface) SendEmail(arg0 context.Context, arg1, arg2 string, arg3 bool, arg4, arg5, arg6, arg7, arg8 string, arg9 *domain.EmailProvider, arg10 domain.EmailOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceInterfaceMockRecorder) SendEmail(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServiceInterface)(nil).SendEmail), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// SendEmailForTemplate mocks base method.
func (m *MockEmailServiceInterface) SendEmailForTemplate(arg0 context.Context, arg1, arg2 string, arg3 *domain.Contact, arg4 domain.ChannelTemplate, arg5 domain.MessageData, arg6 mjml.TrackingSettings, arg7 *domain.EmailProvider, arg8 domain.EmailOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailForTemplate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailForTemplate indicates an expected call of SendEmailForTemplate.
func (mr *MockEmailServiceInterfaceMockRecorder) SendEmailForTemplate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailForTemplate", reflect.TypeOf((*MockEmailServiceInterface)(nil).SendEmailForTemplate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// TestEmailProvider mocks base method.
func (m *MockEmailServiceInterface) TestEmailProvider(arg0 context.Context, arg1 string, arg2 domain.EmailProvider, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestEmailProvider", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestEmailProvider indicates an expected call of TestEmailProvider.
func (mr *MockEmailServiceInterfaceMockRecorder) TestEmailProvider(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestEmailProvider", reflect.TypeOf((*MockEmailServiceInterface)(nil).TestEmailProvider), arg0, arg1, arg2, arg3)
}

// VisitLink mocks base method.
func (m *MockEmailServiceInterface) VisitLink(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisitLink", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// VisitLink indicates an expected call of VisitLink.
func (mr *MockEmailServiceInterfaceMockRecorder) VisitLink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitLink", reflect.TypeOf((*MockEmailServiceInterface)(nil).VisitLink), arg0, arg1, arg2)
}
