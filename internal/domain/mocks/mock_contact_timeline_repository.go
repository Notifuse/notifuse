// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: ContactTimelineRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockContactTimelineRepository is a mock of ContactTimelineRepository interface.
type MockContactTimelineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactTimelineRepositoryMockRecorder
}

// MockContactTimelineRepositoryMockRecorder is the mock recorder for MockContactTimelineRepository.
type MockContactTimelineRepositoryMockRecorder struct {
	mock *MockContactTimelineRepository
}

// NewMockContactTimelineRepository creates a new mock instance.
func NewMockContactTimelineRepository(ctrl *gomock.Controller) *MockContactTimelineRepository {
	mock := &MockContactTimelineRepository{ctrl: ctrl}
	mock.recorder = &MockContactTimelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactTimelineRepository) EXPECT() *MockContactTimelineRepositoryMockRecorder {
	return m.recorder
}

// DeleteForEmail mocks base method.
func (m *MockContactTimelineRepository) DeleteForEmail(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForEmail indicates an expected call of DeleteForEmail.
func (mr *MockContactTimelineRepositoryMockRecorder) DeleteForEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForEmail", reflect.TypeOf((*MockContactTimelineRepository)(nil).DeleteForEmail), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockContactTimelineRepository) List(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *string) ([]*domain.ContactTimelineEntry, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*domain.ContactTimelineEntry)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockContactTimelineRepositoryMockRecorder) List(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContactTimelineRepository)(nil).List), arg0, arg1, arg2, arg3, arg4)
}
