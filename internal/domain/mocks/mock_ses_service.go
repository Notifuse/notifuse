// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/domain (interfaces: SESServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSESServiceInterface is a mock of SESServiceInterface interface.
type MockSESServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSESServiceInterfaceMockRecorder
}

// MockSESServiceInterfaceMockRecorder is the mock recorder for MockSESServiceInterface.
type MockSESServiceInterfaceMockRecorder struct {
	mock *MockSESServiceInterface
}

// NewMockSESServiceInterface creates a new mock instance.
func NewMockSESServiceInterface(ctrl *gomock.Controller) *MockSESServiceInterface {
	mock := &MockSESServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSESServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSESServiceInterface) EXPECT() *MockSESServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateConfigurationSet mocks base method.
func (m *MockSESServiceInterface) CreateConfigurationSet(arg0 context.Context, arg1 domain.SESConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfigurationSet indicates an expected call of CreateConfigurationSet.
func (mr *MockSESServiceInterfaceMockRecorder) CreateConfigurationSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSet", reflect.TypeOf((*MockSESServiceInterface)(nil).CreateConfigurationSet), arg0, arg1, arg2)
}

// CreateEventDestination mocks base method.
func (m *MockSESServiceInterface) CreateEventDestination(arg0 context.Context, arg1 domain.SESConfig, arg2 domain.SESConfigurationSetEventDestination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDestination", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventDestination indicates an expected call of CreateEventDestination.
func (mr *MockSESServiceInterfaceMockRecorder) CreateEventDestination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDestination", reflect.TypeOf((*MockSESServiceInterface)(nil).CreateEventDestination), arg0, arg1, arg2)
}

// CreateSNSTopic mocks base method.
func (m *MockSESServiceInterface) CreateSNSTopic(arg0 context.Context, arg1 domain.SESConfig, arg2 domain.SESTopicConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSNSTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSNSTopic indicates an expected call of CreateSNSTopic.
func (mr *MockSESServiceInterfaceMockRecorder) CreateSNSTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSNSTopic", reflect.TypeOf((*MockSESServiceInterface)(nil).CreateSNSTopic), arg0, arg1, arg2)
}

// DeleteConfigurationSet mocks base method.
func (m *MockSESServiceInterface) DeleteConfigurationSet(arg0 context.Context, arg1 domain.SESConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigurationSet indicates an expected call of DeleteConfigurationSet.
func (mr *MockSESServiceInterfaceMockRecorder) DeleteConfigurationSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSet", reflect.TypeOf((*MockSESServiceInterface)(nil).DeleteConfigurationSet), arg0, arg1, arg2)
}

// DeleteEventDestination mocks base method.
func (m *MockSESServiceInterface) DeleteEventDestination(arg0 context.Context, arg1 domain.SESConfig, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventDestination", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventDestination indicates an expected call of DeleteEventDestination.
func (mr *MockSESServiceInterfaceMockRecorder) DeleteEventDestination(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventDestination", reflect.TypeOf((*MockSESServiceInterface)(nil).DeleteEventDestination), arg0, arg1, arg2, arg3)
}

// DeleteSNSTopic mocks base method.
func (m *MockSESServiceInterface) DeleteSNSTopic(arg0 context.Context, arg1 domain.SESConfig, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSNSTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSNSTopic indicates an expected call of DeleteSNSTopic.
func (mr *MockSESServiceInterfaceMockRecorder) DeleteSNSTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSNSTopic", reflect.TypeOf((*MockSESServiceInterface)(nil).DeleteSNSTopic), arg0, arg1, arg2)
}

// ListConfigurationSets mocks base method.
func (m *MockSESServiceInterface) ListConfigurationSets(arg0 context.Context, arg1 domain.SESConfig) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigurationSets", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigurationSets indicates an expected call of ListConfigurationSets.
func (mr *MockSESServiceInterfaceMockRecorder) ListConfigurationSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigurationSets", reflect.TypeOf((*MockSESServiceInterface)(nil).ListConfigurationSets), arg0, arg1)
}

// ListEventDestinations mocks base method.
func (m *MockSESServiceInterface) ListEventDestinations(arg0 context.Context, arg1 domain.SESConfig, arg2 string) ([]domain.SESConfigurationSetEventDestination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventDestinations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.SESConfigurationSetEventDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventDestinations indicates an expected call of ListEventDestinations.
func (mr *MockSESServiceInterfaceMockRecorder) ListEventDestinations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventDestinations", reflect.TypeOf((*MockSESServiceInterface)(nil).ListEventDestinations), arg0, arg1, arg2)
}

// UpdateEventDestination mocks base method.
func (m *MockSESServiceInterface) UpdateEventDestination(arg0 context.Context, arg1 domain.SESConfig, arg2 domain.SESConfigurationSetEventDestination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDestination", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventDestination indicates an expected call of UpdateEventDestination.
func (mr *MockSESServiceInterfaceMockRecorder) UpdateEventDestination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDestination", reflect.TypeOf((*MockSESServiceInterface)(nil).UpdateEventDestination), arg0, arg1, arg2)
}
