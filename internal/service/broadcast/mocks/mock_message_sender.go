// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/service/broadcast (interfaces: MessageSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendBatch mocks base method.
func (m *MockMessageSender) SendBatch(ctx context.Context, workspaceID, workspaceSecretKey string, trackingEnabled bool, broadcastID string, recipients []*domain.ContactWithList, templates map[string]*domain.Template, emailProvider *domain.EmailProvider) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, workspaceID, workspaceSecretKey, trackingEnabled, broadcastID, recipients, templates, emailProvider)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockMessageSenderMockRecorder) SendBatch(ctx, workspaceID, workspaceSecretKey, trackingEnabled, broadcastID, recipients, templates, emailProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockMessageSender)(nil).SendBatch), ctx, workspaceID, workspaceSecretKey, trackingEnabled, broadcastID, recipients, templates, emailProvider)
}

// SendToRecipient mocks base method.
func (m *MockMessageSender) SendToRecipient(ctx context.Context, workspaceID string, trackingEnabled bool, broadcast *domain.Broadcast, messageID, email string, template *domain.Template, data map[string]interface{}, emailProvider *domain.EmailProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToRecipient", ctx, workspaceID, trackingEnabled, broadcast, messageID, email, template, data, emailProvider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToRecipient indicates an expected call of SendToRecipient.
func (mr *MockMessageSenderMockRecorder) SendToRecipient(ctx, workspaceID, trackingEnabled, broadcast, messageID, email, template, data, emailProvider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRecipient", reflect.TypeOf((*MockMessageSender)(nil).SendToRecipient), ctx, workspaceID, trackingEnabled, broadcast, messageID, email, template, data, emailProvider)
}
