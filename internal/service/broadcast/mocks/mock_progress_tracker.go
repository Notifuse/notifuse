// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/internal/service/broadcast (interfaces: ProgressTracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Notifuse/notifuse/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProgressTracker is a mock of ProgressTracker interface.
type MockProgressTracker struct {
	ctrl     *gomock.Controller
	recorder *MockProgressTrackerMockRecorder
}

// MockProgressTrackerMockRecorder is the mock recorder for MockProgressTracker.
type MockProgressTrackerMockRecorder struct {
	mock *MockProgressTracker
}

// NewMockProgressTracker creates a new mock instance.
func NewMockProgressTracker(ctrl *gomock.Controller) *MockProgressTracker {
	mock := &MockProgressTracker{ctrl: ctrl}
	mock.recorder = &MockProgressTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressTracker) EXPECT() *MockProgressTrackerMockRecorder {
	return m.recorder
}

// GetMessage mocks base method.
func (m *MockProgressTracker) GetMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockProgressTrackerMockRecorder) GetMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockProgressTracker)(nil).GetMessage))
}

// GetProgress mocks base method.
func (m *MockProgressTracker) GetProgress() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockProgressTrackerMockRecorder) GetProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockProgressTracker)(nil).GetProgress))
}

// GetState mocks base method.
func (m *MockProgressTracker) GetState() *domain.TaskState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*domain.TaskState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockProgressTrackerMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockProgressTracker)(nil).GetState))
}

// Increment mocks base method.
func (m *MockProgressTracker) Increment(arg0, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", arg0, arg1)
}

// Increment indicates an expected call of Increment.
func (mr *MockProgressTrackerMockRecorder) Increment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockProgressTracker)(nil).Increment), arg0, arg1)
}

// Initialize mocks base method.
func (m *MockProgressTracker) Initialize(arg0 context.Context, arg1, arg2, arg3 string, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockProgressTrackerMockRecorder) Initialize(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProgressTracker)(nil).Initialize), arg0, arg1, arg2, arg3, arg4)
}

// Save mocks base method.
func (m *MockProgressTracker) Save(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProgressTrackerMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProgressTracker)(nil).Save), arg0, arg1, arg2)
}
