name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    services:
      # PostgreSQL service container for integration tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: notifuse_system_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download
          go get github.com/DATA-DOG/go-sqlmock

      - name: Run tests and generate coverage
        run: |
          # First run the unit tests (including mock tests)
          go test -race -coverprofile=unit_coverage.txt -covermode=atomic $(go list ./... | grep -v integration) -v

          # Create a test .env file for integration tests
          echo "DB_HOST=localhost" > .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_USER=postgres" >> .env.test
          echo "DB_PASSWORD=postgres" >> .env.test
          echo "DB_NAME=notifuse_system_test" >> .env.test
          echo "DB_PREFIX=notifuse_test" >> .env.test
          echo "PASETO_PRIVATE_KEY=UayDa4OMDpm3CvIT+iSC39iDyPlsui0pNQYDEZ1pbo1LsIrO4p/aVuCBWz6LiYvzj9pc+gn0gLwRd0CoHV+nxw==" >> .env.test
          echo "PASETO_PUBLIC_KEY=S7CKzuKf2lbggVs+i4mL84/aXPoJ9IC8EXdAqB1fp8c=" >> .env.test
          echo "ROOT_EMAIL=admin@example.com" >> .env.test

          # Then run integration tests with their own coverage profile
          go test -race -coverprofile=integration_coverage.txt -covermode=atomic -tags=integration ./... -v

          # Merge coverage profiles
          echo "mode: atomic" > coverage.txt
          tail -n +2 unit_coverage.txt >> coverage.txt
          tail -n +2 integration_coverage.txt >> coverage.txt

          # Debug - verify file exists
          ls -la
          cp coverage.txt ../ # Copy to repo root for codecov action

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Notifuse/notifuse
          file: coverage.txt # Now in repo root
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella
          override_branch: main
