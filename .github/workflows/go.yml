name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          go mod download
          go get github.com/DATA-DOG/go-sqlmock

      - name: Run tests and generate coverage
        run: |
          # Create a test .env file for integration tests
          echo "PASETO_PRIVATE_KEY=UayDa4OMDpm3CvIT+iSC39iDyPlsui0pNQYDEZ1pbo1LsIrO4p/aVuCBWz6LiYvzj9pc+gn0gLwRd0CoHV+nxw==" >> .env.test
          echo "PASETO_PUBLIC_KEY=S7CKzuKf2lbggVs+i4mL84/aXPoJ9IC8EXdAqB1fp8c=" >> .env.test
          echo "ROOT_EMAIL=admin@example.com" >> .env.test

          # Run all tests (both unit and integration) with a single coverage profile
          go test -race -coverprofile=coverage.txt -covermode=atomic ./... -v

          # Debug - verify file exists
          ls -la
          cp coverage.txt ../ # Copy to repo root for codecov action

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Notifuse/notifuse
          file: coverage.txt # Now in repo root
          fail_ci_if_error: true
          verbose: true
          name: codecov-umbrella
          override_branch: main
