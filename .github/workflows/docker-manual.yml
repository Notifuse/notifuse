name: Docker Build and Push (Manual)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use (leave empty for latest)'
        required: false
        type: string
        default: 'latest'
      push:
        description: 'Push to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: ${{ inputs.push }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.tag || 'latest' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        if: ${{ inputs.push }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.meta.outputs.digest }}
          subject-digest: ${{ steps.meta.outputs.digest }}
          push-to-registry: true

      - name: Output image details
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.meta.outputs.digest }}"
          echo "Push: ${{ inputs.push }}"
          echo ""
          if [ "${{ inputs.push }}" = "true" ]; then
            echo "üöÄ Docker image successfully built and pushed!"
          else
            echo "üî® Docker image successfully built (not pushed)!"
          fi
          echo "üì¶ Registry: ${{ env.REGISTRY }}"
          echo "üè∑Ô∏è  Image: ${{ env.IMAGE_NAME }}"
          echo "üîñ Tags: ${{ steps.meta.outputs.tags }}"
