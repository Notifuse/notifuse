// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/pkg/tracing (interfaces: Tracer)

// Package pkgmocks is a generated GoMock package.
package pkgmocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	trace "go.opencensus.io/trace"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// AddAttribute mocks base method.
func (m *MockTracer) AddAttribute(arg0 context.Context, arg1 string, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAttribute", arg0, arg1, arg2)
}

// AddAttribute indicates an expected call of AddAttribute.
func (mr *MockTracerMockRecorder) AddAttribute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttribute", reflect.TypeOf((*MockTracer)(nil).AddAttribute), arg0, arg1, arg2)
}

// EndSpan mocks base method.
func (m *MockTracer) EndSpan(arg0 *trace.Span, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSpan", arg0, arg1)
}

// EndSpan indicates an expected call of EndSpan.
func (mr *MockTracerMockRecorder) EndSpan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSpan", reflect.TypeOf((*MockTracer)(nil).EndSpan), arg0, arg1)
}

// MarkSpanError mocks base method.
func (m *MockTracer) MarkSpanError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkSpanError", arg0, arg1)
}

// MarkSpanError indicates an expected call of MarkSpanError.
func (mr *MockTracerMockRecorder) MarkSpanError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSpanError", reflect.TypeOf((*MockTracer)(nil).MarkSpanError), arg0, arg1)
}

// StartServiceSpan mocks base method.
func (m *MockTracer) StartServiceSpan(arg0 context.Context, arg1, arg2 string) (context.Context, *trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServiceSpan", arg0, arg1, arg2)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*trace.Span)
	return ret0, ret1
}

// StartServiceSpan indicates an expected call of StartServiceSpan.
func (mr *MockTracerMockRecorder) StartServiceSpan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceSpan", reflect.TypeOf((*MockTracer)(nil).StartServiceSpan), arg0, arg1, arg2)
}

// StartSpan mocks base method.
func (m *MockTracer) StartSpan(arg0 context.Context, arg1 string) (context.Context, *trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpan", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*trace.Span)
	return ret0, ret1
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockTracerMockRecorder) StartSpan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockTracer)(nil).StartSpan), arg0, arg1)
}

// StartSpanWithAttributes mocks base method.
func (m *MockTracer) StartSpanWithAttributes(arg0 context.Context, arg1 string, arg2 ...trace.Attribute) (context.Context, *trace.Span) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpanWithAttributes", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*trace.Span)
	return ret0, ret1
}

// StartSpanWithAttributes indicates an expected call of StartSpanWithAttributes.
func (mr *MockTracerMockRecorder) StartSpanWithAttributes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpanWithAttributes", reflect.TypeOf((*MockTracer)(nil).StartSpanWithAttributes), varargs...)
}

// TraceMethod mocks base method.
func (m *MockTracer) TraceMethod(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceMethod", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TraceMethod indicates an expected call of TraceMethod.
func (mr *MockTracerMockRecorder) TraceMethod(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceMethod", reflect.TypeOf((*MockTracer)(nil).TraceMethod), arg0, arg1, arg2, arg3)
}

// TraceMethodWithResultAny mocks base method.
func (m *MockTracer) TraceMethodWithResultAny(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceMethodWithResultAny", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceMethodWithResultAny indicates an expected call of TraceMethodWithResultAny.
func (mr *MockTracerMockRecorder) TraceMethodWithResultAny(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceMethodWithResultAny", reflect.TypeOf((*MockTracer)(nil).TraceMethodWithResultAny), arg0, arg1, arg2, arg3)
}

// WrapHTTPClient mocks base method.
func (m *MockTracer) WrapHTTPClient(arg0 *http.Client) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapHTTPClient", arg0)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// WrapHTTPClient indicates an expected call of WrapHTTPClient.
func (mr *MockTracerMockRecorder) WrapHTTPClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapHTTPClient", reflect.TypeOf((*MockTracer)(nil).WrapHTTPClient), arg0)
}
