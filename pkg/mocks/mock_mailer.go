// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Notifuse/notifuse/pkg/mailer (interfaces: Mailer)

// Package pkgmocks is a generated GoMock package.
package pkgmocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendMagicCode mocks base method.
func (m *MockMailer) SendMagicCode(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMagicCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMagicCode indicates an expected call of SendMagicCode.
func (mr *MockMailerMockRecorder) SendMagicCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMagicCode", reflect.TypeOf((*MockMailer)(nil).SendMagicCode), arg0, arg1)
}

// SendWorkspaceInvitation mocks base method.
func (m *MockMailer) SendWorkspaceInvitation(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkspaceInvitation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWorkspaceInvitation indicates an expected call of SendWorkspaceInvitation.
func (mr *MockMailerMockRecorder) SendWorkspaceInvitation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkspaceInvitation", reflect.TypeOf((*MockMailer)(nil).SendWorkspaceInvitation), arg0, arg1, arg2, arg3)
}
